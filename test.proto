syntax = "proto3";

import "github.com/cjp2600/protoc-gen-bom/plugin/options/bom.proto";
import "google/protobuf/timestamp.proto";
import "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api/annotations.proto";

package main;

// Сервис работы с контрактами
service ContractService {

    // вывод версии сервиса
    rpc ContractVersion (Empty) returns (VersionResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts/version"
         };
    }

    // метод создания контрактов
    rpc CreateContract (Contract) returns (ContractResponse) {
        option (google.api.http) = {
            post: "/api/v1/contracts"
            body: "*"
         };
    }

    // метод создания типа контракта
    rpc CreateContractType (ContractType) returns (ContractTypeResponse) {
        option (google.api.http) = {
            post: "/api/v1/contracts/types"
            body: "*"
         };
    }

    // Получение акта по id
    rpc GetActById (IdQueryRequest) returns (ActResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts/acts/{id}"
         };
    }

    // Получение акта по id
    rpc CreateAct (Act) returns (ActResponse) {
        option (google.api.http) = {
            post: "/api/v1/contracts/acts"
            body: "*"
         };
    }

    // список всех контракотов по определенному мерченту или провайдеру
    rpc ContractList (ContractListQueryRequest) returns (ContractListResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts"
         };
    }

    // создание связи провайдер/тип контракта
    rpc CreateProviderContractType (ProviderContractTypeRequest) returns (EmptyResponse) {
        option (google.api.http) = {
            post: "/api/v1/contracts/types/providers"
            body: "*"
         };
    }

    // Создание запроса на контракт
    rpc ContractRequest (CreateRequestRequest) returns (RequestResponse) {
        option (google.api.http) = {
            post: "/api/v1/contracts/requests"
            body: "*"
         };
    }

    // обновить запрос
    rpc UpdateRequest (Request) returns (RequestResponse) {
        option (google.api.http) = {
            put: "/api/v1/contracts/requests/{id}"
            body: "*"
         };
    }

    // апрув звапроса
    rpc ApproveRequest (IdQueryRequest) returns (EmptyResponse) {
        option (google.api.http) = {
             post: "/api/v1/contracts/requests/{id}/approve"
             body: "*"
         };
    }

    // дизапрув запроса
    rpc DisapproveRequest (IdQueryRequest) returns (EmptyResponse) {
        option (google.api.http) = {
             post: "/api/v1/contracts/requests/{id}/disapprove"
             body: "*"
         };
    }

    // отмена запроса
    rpc CancelRequest (IdQueryRequest) returns (EmptyResponse) {
        option (google.api.http) = {
             post: "/api/v1/contracts/requests/{id}/cancel"
             body: "*"
         };
    }

    // Получение списка входящих запросов
    rpc GetRequests (IdListQueryRequest) returns (RequestListResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts/requests"
         };
    }
    // вывод списка всех типов(контракта) производителя
    rpc ContractTypeAllList (ProviderListQueryRequest) returns (ContractTypesResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts/{providerId}/types/all"
         };
    }

    // вывод списка активных типов(контракта) производителя
    rpc ContractTypeActiveList (ProviderListQueryRequest) returns (ContractTypesResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts/{providerId}/types/active"
         };
    }

    // получение информации о контакте
    rpc GetOneContract (IdQueryRequest) returns (ContractResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts/{id}"
         };
    }

    // получение информации о контакте
    rpc UpdateOneContract (UpdateContractRequest) returns (ContractResponse) {
        option (google.api.http) = {
            put: "/api/v1/contracts/{id}"
            body: "*"
         };
    }

    //Получение типов контрактов по провайдерам (балк)
    rpc GetContractsBulk (ProvidersBulkRequest) returns (ContractsMapResponse) {
        option (google.api.http) = {
            post: "/api/v1/contracts/bulk"
            body: "*"
         };
    }

    // Получение актов по контракту
    rpc GetActByContract (IdQueryRequest) returns (ActsResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts/{id}/act"
         };
    }

    // Получение продуктов по контраку
    rpc GetContractProducts (ProductsListQueryRequest) returns (ProductsListQueryResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts/{id}/products"
         };
    }

    // Получение продуктов по контраку в сгруппированном виде
    rpc GetGroupContractProducts (ProductsListQueryRequest) returns (GroupProductsListQueryResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts/{id}/products/group"
         };
    }

    // OneContractStatisticResponse
    rpc OneContractStatistic (IdQueryRequest) returns (OneContractStatisticResponse) {
        option (google.api.http) = {
            get: "/api/v1/contracts/{id}/statistic"
         };
    }

    // отмена контракт
    rpc CancelContract (IdQueryRequest) returns (EmptyResponse) {
        option (google.api.http) = {
             post: "/api/v1/contracts/{id}/cancel"
             body: "*"
         };
    }

    //Получение типов контрактов по провайдерам (балк)
    rpc GetContractsTypeBulk (ProvidersBulkRequest) returns (ContractTypesProviderMapResponse) {
        option (google.api.http) = {
            post: "/api/v1/contracts/types/bulk"
            body: "*"
         };
    }

    // метод получение всех продуктов учавсвующие в контрактах мерчента
    rpc GetProducts (GetProductsRequest) returns (GetProductsResponse) {
        option (google.api.http) = {
            post: "/api/v1/contracts/products"
            body: "*"
         };
    }

    // Получение статистики по типу контракта
    rpc GetStatisticContractType (StatisticContractTypeRequest) returns (StatisticContractTypeResponse) {
        option (google.api.http) = {
            post: "/api/v1/contracts/statistic"
            body: "*"
         };
    }
}

message GetProductsRequest {
    string merchantId = 1;
    string providerId = 2;
    string contractId = 3;
}
message GetProductsResponse {
    int32 status = 1;
    string message = 2;
    repeated string data = 3;
}

//
// Описание запросов/ответов
//

// список полей доступных для сортировки
message SortingFields {
    enum Sort {
        _id = 0; // идентификатор
    }
}

// список типов сортировки
enum SortTypes {
    asc = 0;
    desc = 1;
}

enum RequestType {
    provider = 0;
    merchant = 1;
}

// сортировка
message SortQuery {
    SortingFields.Sort field = 1;
    SortTypes type = 2;
}

// статисика запросов
message StatisticContractTypeRequest {
    repeated string contractTypeIds = 1;
    string providerId = 2;
    string merchantId = 3;
}

message StatisticContractTypeItem {
    string contractTypeId = 1;
    int32 contracts = 2;
    int32 requests = 3;
}

// статисика ответов
message StatisticContractTypeResponse {
    int32 status = 1;
    string message = 2;
    repeated StatisticContractTypeItem data = 3;
}

// запрос на список с сортировкой c переданным провайдером
message ProviderListQueryRequest {
    int32 page = 1;
    int32 size = 2;
    string providerId = 4;
    SortQuery sort = 5;
}

message ProductsListQueryRequest {
    string id = 1;
    int32 page = 2;
    int32 size = 3;
}

enum ProductUpdateType {
    replace = 0;
    append = 1;
    delete = 2;
}
message UpdateContractRequest {
    string id = 4;
    repeated string productsIds = 1;
    ProductUpdateType productUpdateType = 2;
}

// запрос на список с сортировкой c переданным мерчентом
message ContractListQueryRequest {
    int32 page = 1;
    int32 size = 2;
    string merchantId = 4;
    SortQuery sort = 5;
    string providerId = 6;
    string status = 7;

}

// запрос на список с сортировкой
message ListQueryRequest {
    int32 page = 1;
    int32 size = 2;
    SortQuery sort = 3;
}

// запрос на еденичное получение с id
message IdQueryRequest {
    string id = 4;
}

// запрос на создание (запроса на контракт)
message CreateRequestRequest {
    oneof publishField {
        bool publish = 1;
    }

    string contractTypeId = 2 [(bom.field).tag = {mongoObjectId:true}]; // идентификатор типа (object)
    string from = 3 [(bom.field).tag = {mongoObjectId:true}]; // идентификатор мерчанта
    string to = 4 [(bom.field).tag = {mongoObjectId:true}]; // идентификатор поставщика
    repeated string productIds = 5; // идентификатор продуктов
    bool allProducts = 6; // флаг о участии всех товаров
    RequestType requestType = 7;
}

// запрос на список с сортировкой c переданным id
message IdListQueryRequest {
    int32 page = 1;
    int32 size = 2;
    // string id = 3;
    SortQuery sort = 4;
    string from = 5;
    string status = 6;
    string to = 8;
    oneof publishField {
        bool publish = 9;
    }

}

// пагинация
message Pagination {
    int32 totalCount = 1;
    int32 totalPages = 2;
    int32 currentPage = 3;
    int32 size = 4;
}

// отает спсика контрактов
message ContractListResponse {
    int32 status = 1;
    string message = 2;
    repeated Contract data = 3;
    Pagination pagination = 4;
}


message ContractProduct {
    string id = 1;
    string nom = 2;
}

message ProductsListQueryResponse {
    int32 status = 1;
    string message = 2;
    repeated ContractProduct data = 3;
    Pagination pagination = 4;
}

message GroupContractProduct {
    string brand = 1;
    repeated ContractProduct products = 3;
}

message GroupProductsListQueryResponse {
    int32 status = 1;
    string message = 2;
    repeated GroupContractProduct data = 3;
    Pagination pagination = 4;
}

message ActsResponse {
    int32 status = 1;
    string message = 2;
    repeated Act data = 3;
}

message ActResponse {
    int32 status = 1;
    string message = 2;
    Act data = 3;
}

message EmptyResponse {
    int32 status = 1;
    string message = 2;
}

// вывод еденичного контракта
message ContractResponse {
    int32 status = 1;
    string message = 2;
    Contract data = 3;
}

// запрос на установку/удаление связи провайдер/контракт
message ProviderContractTypeRequest {
    bool active = 1;
    string contractTypeId = 2;
    string providerId = 3;
}

// вывод еденичного типа контракта
message ContractTypeResponse {
    int32 status = 1;
    string message = 2;
    ContractType data = 3;
}

// вывод еденичного запроса
message RequestResponse {
    int32 status = 1;
    string message = 2;
    Request data = 3;
}

// вывод пагинированного списка запроса
message RequestListResponse {
    int32 status = 1;
    string message = 2;
    repeated Request data = 3;
    Pagination pagination = 4;
}

// вывод списка типов котракта
message ContractTypesResponse {
    int32 status = 1;
    string message = 2;
    repeated ContractType data = 3;
    Pagination pagination = 4;
}

// вывод списка типов котракта
message ContractTypesList {
    repeated ContractType list = 1;
}

// вывод списка типов котракта
message ContractTypesProviderMapResponse {
    int32 status = 1;
    string message = 2;
    map<string, ContractTypesList> data = 3;
}

// вывод списка котрактов bulk
message ContractsMapResponse {
    int32 status = 1;
    string message = 2;
    map<string, Contract> data = 3;
}

message CurrentProgress {
    int32 count = 1;
    int32 sum = 2;
}

message MerchantSum {
    int32 count = 1;
    int32 sum = 2;
}

message ProviderSum {
    int32 count = 1;
    int32 sum = 2;
}

message CommissionSum {
    int32 count = 1;
    int32 sum = 2;
}

message OneContractStatistic {
    CurrentProgress progress = 1;
    MerchantSum merchantSum = 2;
    ProviderSum providerSum = 3;
    CommissionSum commissionSum = 4;
}

// вывод списка котрактов bulk
message OneContractStatisticResponse {
    int32 status = 1;
    string message = 2;
    OneContractStatistic data = 3;
}


// пустой запрос/ответ
message Empty {
}

// ответ - верия сервиса
message VersionResponse {
    int32 status = 1; // статус ответа
    string version = 2; // версия
}

// ответ - верия сервиса
message ProvidersBulkRequest {
    repeated string ids = 1;
}

//
// Описание сущностей
//

// операторы условый контракта
enum ConditionsOperators {
    or = 0; // условие любого выполнения из переданных
    and = 1; // условие точного совпадения
}

// Символьные коды условий (прописываются зарание при написании нового условия)
enum ContractCharacterCode {
    baseCondition = 0; // базовое условие
    successfulProductSales = 1; // успешная продажа продукции
    SaleOfChecks = 2; // основной тип продаж чеков
    // ...
}

// статусы запросов
enum RequestStatus {
    pending = 0; // в ожидании
    approve = 1; // одобрен
    disapprove = 2; // откланен
    cancel = 3; // отменен
}

// статусы контрактов
enum ContractStatus {
    waitApprove = 0; // в ожидании
    open = 1; // окрытый
    closed = 2; // закрытый
    rejected = 3; // отклонён
}

// сущность контрактов
message Contract {
    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
     };

    string id = 1 [(bom.field).tag = {mongoObjectId:true isID:true}]; // идентификатор object id

    ContractType contractType = 2; // тип контракта

    string publicId = 3;
    string providerId = 4 [(bom.field).tag = {mongoObjectId:true}]; // идентификатор поставщика
    string merchantId = 5 [(bom.field).tag = {mongoObjectId:true}]; // идентификатор мерчента

    bool isAllProductsInvolved = 6; // флаг участия всех товаров производителя (иначе из списка)
    ContractStatus status = 7; // статус контракта
    int32 progressPercent = 8; // прогресс выполнения
    repeated ProgressEventLog eventLogs = 9; // события выполнения контракта
    repeated string products = 10 [(bom.field).tag = {mongoObjectId:true}]; // массив учвсвующих в продуктов

    google.protobuf.Timestamp expiredAt = 11; // время жизни контракта
    google.protobuf.Timestamp createdAt = 12;
    google.protobuf.Timestamp updatedAt = 13;
    google.protobuf.Timestamp activatedAt = 17;

    oneof closedAtField {
        google.protobuf.Timestamp closedAt = 16;
    }

    google.protobuf.Timestamp startDateOfReportingPeriod = 15; // дата старта текущего отчетного периода

    // динамичные поля не импользуешеся в БД
    string ContractTypeId = 14 [(bom.field).tag = {mongoObjectId:true skip:true}];
}

// сущность типа контракта
message ContractType {
    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
         collection: "contract_type"
     };

    string id = 1 [(bom.field).tag = {mongoObjectId:true isID:true}]; // идентификатор object id
    string name = 2; // название
    string description = 3; // описание типа контракта
    ConditionOfAchievement conditionsOfAchievement = 4; // правила достижения

    google.protobuf.Timestamp createdAt = 5;
    google.protobuf.Timestamp updatedAt = 6;

    // динамические поля (необходимые только для передаче gPRC)
    bool active = 7 [(bom.field).tag = {skip:true}]; // флаг активности в рамках одного производителя (динамическое поле)
}

// сущность условий
message ConditionOfAchievement {
    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
     };

    ConditionsOperators operator = 1; // оператор
    repeated Condition conditionAliases = 2; // условия
}

// сущность условия
message Condition {
    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
     };

    ContractCharacterCode code = 1; // символьный код условия контракта
    map<string, string> arguments = 2; // аргументы условия контракта
}

// сущность доступных для работы типов контактов
message ProviderContractType {
    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
         collection: "providers_contract_type"
     };

    string id = 1 [(bom.field).tag = {mongoObjectId:true isID:true}]; // идентификатор запроса
    string contractTypeId = 2 [(bom.field).tag = {mongoObjectId:true}]; // идентификатор типа (object)
    string providerId = 3 [(bom.field).tag = {mongoObjectId:true}]; // идентификатор провайдера
}

// запрос на участия в контракте
message Request {
    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
         collection: "requests"
     };

    string id = 1 [(bom.field).tag = {mongoObjectId:true isID:true}]; // идентификатор запроса
    string contractId = 2 [(bom.field).tag = {mongoObjectId:true}]; // идентификатор (object)
    string from = 3 [(bom.field).tag = {mongoObjectId:true}]; // идентификатор мерчанта
    string to = 4 [(bom.field).tag = {mongoObjectId:true}]; // идентификатор поставщика
    string transmittalDescription = 5; // сопроводительное описание

    oneof publishField {
        bool publish = 14;
    }

    RequestStatus status = 8; // статус запроса
    repeated RequestEventLog eventLogs = 9;

    google.protobuf.Timestamp expiredAt = 10; // время жизни запроса
    google.protobuf.Timestamp createdAt = 11;
    google.protobuf.Timestamp updatedAt = 12;

    // динамические поля (необходимые только для передаче gPRC)
    Contract contract = 13 [(bom.field).tag = {skip:true}]; // сущность контракта
}

// логирование прогресса (логируется достижение прогесса)
message ProgressEventLog {
    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
     };

    google.protobuf.Timestamp createdAt = 1; // дата события
    string message = 2; // описание события

}

// логирование дейсвий по запросу
message RequestEventLog {
    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
     };

    google.protobuf.Timestamp createdAt = 1; // дата события
    string message = 2; // описание события
}

// описание сущности актов
message Act {

    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
     };

    string id = 1 [(bom.field).tag = {mongoObjectId:true isID:true}]; // идентификатор object id
    string contractId = 2 [(bom.field).tag = {mongoObjectId:true}];   // идентификатор (object)
    int32 amount = 3;
    string publicId = 8;
    Contract contract = 9;
    google.protobuf.Timestamp startPeriod = 4;
    google.protobuf.Timestamp endPeriod = 5;

    google.protobuf.Timestamp createdAt = 6;
    google.protobuf.Timestamp updatedAt = 7;
}

// описание сущности актов
message SaleOfChecksPayload {

    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
         collection: "condition_sale_checks_payload"
     };

    string id = 1 [(bom.field).tag = {mongoObjectId:true isID:true}]; // идентификатор object id
    string periodId = 2;
    string contractId = 3 [(bom.field).tag = {mongoObjectId:true}];   // идентификатор (object)
    int32 amount = 4;
    int32 count = 5;

    google.protobuf.Timestamp startPeriod = 6;
    google.protobuf.Timestamp endPeriod = 7;

    google.protobuf.Timestamp createdAt = 8;
    google.protobuf.Timestamp updatedAt = 9;
}