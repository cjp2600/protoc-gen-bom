syntax = "proto3";

package main;

import "github.com/cjp2600/protoc-gen-bom/plugin/options/bom.proto";
import "google/protobuf/timestamp.proto";
import "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api/annotations.proto";

// сервис для работы с Аптечными сетями и пунктами продаж.
service MerchantService {

    // получить список аптечных сетей
    rpc MerchantsList (ListQueryRequest) returns (MerchantsResponse) {
        option (google.api.http) = {
            get: "/api/v1/merchants"
         };
    }

    // получить список доступных для регистрации ас
    rpc AvailableMerchantsList (ListQueryRequest) returns (MerchantsResponse) {
        option (google.api.http) = {
            get: "/api/v1/merchants/available"
         };
    }

    // получить текущую аптечную сеть
    rpc CurrentMerchant (Empty) returns (MerchantResponse) {
        option (google.api.http) = {
            get: "/api/v1/merchants/current"
         };
    }

    // создать аптечную сеть
    rpc CreateMerchant (Merchant) returns (MerchantResponse) {
        option (google.api.http) = {
            post: "/api/v1/merchants"
            body: "*"
         };
    }
    // получение спаска всех статусов
    rpc GetAllStatuses (Empty) returns (StatusesResponse) {
        option (google.api.http) = {
            get: "/api/v1/merchants/statuses"
         };
    }

    // обновить аптечную сеть
    rpc UpdateMerchant (UpdateMerchantFullRequest) returns (MerchantResponse) {
        option (google.api.http) = {
            put: "/api/v1/merchants/{id}"
            body: "*"
         };
    }
    //  получить группированный список точек продаж по ас
    rpc GetPointByRegion (ListQueryRequest) returns (PointsResponseGrouped) {
        option (google.api.http) = {
            get: "/api/v1/merchants/points/group"
         };
    }

    // получить точку продаж по id
    rpc GetOnePoint (GetByIdRequest) returns (PointResponse) {
        option (google.api.http) = {
            get: "/api/v1/merchants/points/{id}"
         };
    }

    //  получить список точек продаж
    rpc PointsList (ListQueryRequest) returns (PointsResponse) {
        option (google.api.http) = {
            get: "/api/v1/merchants/points"
         };
    }

    // еденисное полученте ас
    rpc GetOneMerchant (GetByIdRequest) returns (MerchantResponse) {
        option (google.api.http) = {
            get: "/api/v1/merchants/{id}"
         };
    }

    // удаление ас
    rpc DeleteOneMerchant (GetByIdRequest) returns (EmptyResponse) {
        option (google.api.http) = {
            delete: "/api/v1/merchants/{id}"
         };
    }

    // присвоение пользователя к ас
    rpc MerchantAssignUser (AssignUserRequest) returns (MerchantUsersResponse) {
        option (google.api.http) = {
            post: "/api/v1/merchants/{id}/users"
            body: "*"
         };
    }

    rpc GetMerchantUsers (GetByIdRequest) returns (MerchantUsersResponse) {
        option (google.api.http) = {
            get: "/api/v1/merchants/{id}/users"
         };
    }

    // удаление пользователя от ас
    rpc MerchantDeleteUser (UnAssignUserRequest) returns (EmptyResponse) {
        option (google.api.http) = {
            delete: "/api/v1/merchants/{id}/users/{userId}"
         };
    }

    // создание пункта продаж
    rpc CreatePoint (Point) returns (PointResponse) {
        option (google.api.http) = {
            post: "/api/v1/merchants/{merchantId}/points"
            body: "*"
        };
    }

    // удаление пункта продаж
    rpc DeleteOnePoint (GetByIdRequest) returns (EmptyResponse) {
        option (google.api.http) = {
            delete: "/api/v1/merchants/points/{id}"
         };
    }

    // обновление статуса точки
    rpc UpdatePointStatus (UpdateStatusRequest) returns (PointResponse) {
        option (google.api.http) = {
            put: "/api/v1/merchants/points/{id}/status"
            body: "*"
         };
    }

    // обновление пункта продаж
    rpc UpdatePoint (Point) returns (PointResponse) {
        option (google.api.http) = {
            put: "/api/v1/merchants/points/{id}"
            body: "*"
         };
    }

    // получение ас балковый метод
    rpc GetBulkMerchants (BulkIdsRequest) returns (MerchantsResponse) {
        option (google.api.http) = {
            post: "/api/v1/merchants/bulk"
            body: "*"
         };
    }

}

enum ProgressStatus {
    new = 0;
    pendingVerification = 1;
    verified = 2;
    pendingIntegration = 3;
    integrated = 4;
    active = 5;
    inactive = 6;
}

message MerchantListSortFields {
    enum Sort {
        _id = 0;
        Address = 1;
    }
}

enum SortTypes {
    asc = 0;
    desc = 1;
}

message Empty {
}

message StatusesResponse {
    int32 status = 1;
    string message = 2;
    repeated string data = 3;
    Pagination pagination = 4;
}

message UpdateStatusRequest {
    string id = 1;
    oneof statusField {
        ProgressStatus status = 2;
    }
    bool force = 3;
}

message GetByIdRequest {
    string id = 1;
}

message AssignUserRequest {
    string id = 1;
    repeated string userIds = 2;
}

message UnAssignUserRequest {
    string id = 1;
    string userId = 2;
}

message MerchantRequest {
    string name = 1;
    string description = 2;
    string logo = 3;
    string address = 4;
    string licence = 5;
    string inn = 6;
}

message UpdateMerchantRequest {
    string id = 1;
    string name = 2;
    string description = 3;
    string logo = 4;
    string licence = 5;
}

enum EventType {
    userAddLegal = 0;
    verificationLegal = 1;
    declineLegal = 2;
    startIntegration = 3;
    isIntegrated = 4;
    isActivated = 5;
    isInActive = 6;
    updateStatusForce = 7;
}

message UpdateMerchantFullRequest {
    option (bom.opts) = {model: true};

    string id = 1 [(bom.field).tag = {validator: "required~Id:FIELD_IS_REQUIRED"}];

    string name = 2 [(bom.field).tag = {validator: "required~name:FIELD_IS_REQUIRED"}];
    string description = 3;
    string logo = 4;
    string licence = 5;
    Address address = 6;

    oneof legalIdField {
        string legalId = 7 [(bom.field).tag = {mongoObjectId:true}];
    }

    PointsMessage points = 8;

    oneof publishField {
        bool publish = 14;
    }

    oneof eventField {
        EventType event = 15;
    }

    oneof statusField {
        ProgressStatus status = 9;
    }

    repeated Regions regions = 12;
    int32 pointsCounter = 13;
}

message MerchantLog {
    option (bom.opts) = {
         model: true
         crud: true
     };

    google.protobuf.Timestamp createdAt = 1;
    EventType event = 2;
    string message = 3;
}

// Аптечная сеть
message Merchant {

    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
         collection: "merchant"
     };

    string id = 1 [(bom.field).tag = {mongoObjectId:true isID:true}];

    oneof publishField {
        bool publish = 14;
    }


    string name = 2;
    string description = 3;
    string logo = 4;
    string licence = 5;
    Address address = 6;
    string legalId = 7 [(bom.field).tag = {mongoObjectId:true}];
    PointsMessage points = 8;


    oneof statusField {
        ProgressStatus status = 9;
    }


    repeated MerchantLog log = 15;

    google.protobuf.Timestamp createdAt = 10;
    google.protobuf.Timestamp updatedAt = 11;
    repeated Regions regions = 12;
    int32 pointsCounter = 13;
}

message Regions {
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
     };
    string name = 1;
    int32 count = 2;
}

message PointsMessage {
    option (bom.opts) = {
         model: true
         crud: true
     };
    repeated string items = 8 [(bom.field).tag = {mongoObjectId:true}];

}

// Точка продаж
message Point {
    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
         collection: "point"
     };

    string id = 1 [(bom.field).tag = {mongoObjectId:true isID:true}];
    string inn = 3;
    string name = 4;
    string merchantId = 5 [(bom.field).tag = {mongoObjectId:true}];
    Address address = 6;
    string legalId = 7 [(bom.field).tag = {mongoObjectId:true}];
    Ofd ofd = 8;
    google.protobuf.Timestamp createdAt = 9;
    google.protobuf.Timestamp updatedAt = 10;
    ProgressStatus status = 11;
    string licence = 12;

}

message Ofd {
    option (bom.opts) = {
         model: true
         crud: true
     };
    string type = 1;
    string credentials = 2;
}

// связь аптечной сети и пользователя
message MerchantUsers {

    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
         collection: "merchant_users"
     };

    string merchantId = 1 [(bom.field).tag = {mongoObjectId:true}];
    string userId = 2 [(bom.field).tag = {mongoObjectId:true}];
    oneof activeField {
        bool active = 3;
    }
}

// адрес
message Address {
    // определяем сообщение как модель
    option (bom.opts) = {
         model: true
         crud: true // нужны методы для переопределения
     };
    string value = 1;
    string country = 2; // страна
    int32 postalCode = 3; // индекс
    string region = 4; // регион
    string city = 5; // город
    string street = 6; // улица
    string house = 7; // дом
    string block = 8; // строение/дробь
    string flat = 9; // квартира (если есть)
    string regionWithType = 10;
    string geoLat = 11;
    string geoLon = 12;

}

message Pagination {
    int32 totalCount = 1;
    int32 totalPages = 2;
    int32 currentPage = 3;
    int32 size = 4;
}

message MerchantResponse {
    int32 status = 1;
    string message = 2;
    Merchant data = 3;
}

message MerchantsResponse {
    int32 status = 1;
    string message = 2;
    repeated Merchant data = 3;
    Pagination pagination = 4;
}

message MerchantUsersResponse {
    int32 status = 1;
    string message = 2;
    repeated MerchantUsers data = 3;
}

message MerchantListSortQuery {
    MerchantListSortFields.Sort field = 1;
    SortTypes type = 2;
}

message ListQueryRequest {
    int32 page = 1;
    int32 size = 2;
    string name = 3;
    MerchantListSortQuery sort = 4;
    string id = 5;
    string pointsNumberFrom = 6;
    string pointsNumberTo = 7;
    string regionName = 8;
    oneof statusField {
        ProgressStatus status = 9;
    }
    oneof publishField {
        bool publish = 14;
    }

}

message EmptyResponse {
    int32 status = 1;
    string message = 2;
}

message PointRequest {
    string id = 1;
    string inn = 2;
    string name = 3;
    string address = 4;
}

message PointResponse {
    int32 status = 1;
    string message = 2;
    Point data = 3;
}

message PointsResponse {
    int32 status = 1;
    string message = 2;
    repeated Point data = 3;
    Pagination pagination = 4;
}

message PointsResponseGrouped {
    int32 status = 1;
    string message = 2;
    repeated RegionWithPoints data = 5;
    Pagination pagination = 4;
}

message RegionWithPoints {
    string name = 1;
    repeated Point points = 2;
}

message Points {
    repeated Point points = 1;
}

message BulkIdsRequest {
    repeated string ids = 1;
}
