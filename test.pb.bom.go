// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package main

import (
	context "context"
	fmt "fmt"
	valid "github.com/asaskevich/govalidator"
	bom "github.com/cjp2600/bom"
	_ "github.com/cjp2600/protoc-gen-bom/plugin/options"
	proto "github.com/gogo/protobuf/proto"
	ptypes "github.com/golang/protobuf/ptypes"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	readpref "go.mongodb.org/mongo-driver/mongo/readpref"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
	os "os"
	time "time"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// MongoClient - create mongo connection
var MongoClient *mongo.Client

// MongoConnection - connection
func MongoConnection() (*mongo.Client, error) {
	ctx, _ := context.WithTimeout(context.Background(), 10*time.Second)
	dbUrl := os.Getenv("MONGO_URL")
	if len(dbUrl) == 0 {
		return nil, fmt.Errorf("MONGO_URL env is empty")
	}
	client, err := mongo.Connect(ctx, options.Client().ApplyURI(dbUrl))
	if err != nil {
		return client, err
	}
	ctx, _ = context.WithTimeout(context.Background(), 2*time.Second)
	err = client.Ping(ctx, readpref.Primary())
	if err != nil {
		return client, err
	}
	MongoClient = client
	dbName := os.Getenv("MONGO_DB_NAME")
	if len(dbName) == 0 {
		dbName = "contractservice"
	}
	client.Database(dbName)
	return client, nil
}

// create Bom wrapper (ContractService)
func ContractServiceBomWrapper() *bom.Bom {
	dbName := os.Getenv("MONGO_DB_NAME")
	if len(dbName) == 0 {
		dbName = "contractservice"
	}
	bomObject, _ := bom.New(
		bom.SetMongoClient(MongoClient),
		bom.SetDatabaseName(dbName),
	)
	// set global var
	return bomObject
}

func (e *ContractMongo) ToPB() *Contract {
	var resp Contract
	if !e.Id.IsZero() {
		resp.Id = e.Id.Hex()
	}
	// create single pb
	if e.ContractType != nil {
		resp.ContractType = e.ContractType.ToPB()
	}
	resp.PublicId = e.PublicId
	if !e.ProviderId.IsZero() {
		resp.ProviderId = e.ProviderId.Hex()
	}
	if !e.MerchantId.IsZero() {
		resp.MerchantId = e.MerchantId.Hex()
	}
	resp.IsAllProductsInvolved = e.IsAllProductsInvolved
	resp.Status = e.Status
	resp.ProgressPercent = e.ProgressPercent
	// create nested pb
	var subEventLogs []*ProgressEventLog
	if e.EventLogs != nil {
		if len(e.EventLogs) > 0 {
			for _, b := range e.EventLogs {
				subEventLogs = append(subEventLogs, b.ToPB())
			}
		}
	}
	resp.EventLogs = subEventLogs
	if len(e.Products) > 0 {
		var subProducts []string
		for _, b := range e.Products {
			if !b.IsZero() {
				subProducts = append(subProducts, b.Hex())
			}
		}
		resp.Products = subProducts
	}
	ptapExpiredAt, _ := ptypes.TimestampProto(e.ExpiredAt)
	resp.ExpiredAt = ptapExpiredAt
	ptapCreatedAt, _ := ptypes.TimestampProto(e.CreatedAt)
	resp.CreatedAt = ptapCreatedAt
	ptapUpdatedAt, _ := ptypes.TimestampProto(e.UpdatedAt)
	resp.UpdatedAt = ptapUpdatedAt
	ptapActivatedAt, _ := ptypes.TimestampProto(e.ActivatedAt)
	resp.ActivatedAt = ptapActivatedAt
	if e.ClosedAt != nil {
		ptapClosedAt, _ := ptypes.TimestampProto(e.GetClosedAt())
		resp.ClosedAtField = &Contract_ClosedAt{ptapClosedAt}
	}
	ptapStartDateOfReportingPeriod, _ := ptypes.TimestampProto(e.StartDateOfReportingPeriod)
	resp.StartDateOfReportingPeriod = ptapStartDateOfReportingPeriod
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *Contract) ToMongo() *ContractMongo {
	var resp ContractMongo
	if len(e.Id) > 0 {
		resp.Id = bom.ToObj(e.Id)
	}
	// create single mongo
	if e.ContractType != nil {
		resp.ContractType = e.ContractType.ToMongo()
	}
	resp.PublicId = e.PublicId
	if len(e.ProviderId) > 0 {
		resp.ProviderId = bom.ToObj(e.ProviderId)
	}
	if len(e.MerchantId) > 0 {
		resp.MerchantId = bom.ToObj(e.MerchantId)
	}
	resp.IsAllProductsInvolved = e.IsAllProductsInvolved
	resp.Status = e.Status
	resp.ProgressPercent = e.ProgressPercent
	// create nested mongo
	var subEventLogs []*ProgressEventLogMongo
	if e.EventLogs != nil {
		if len(e.EventLogs) > 0 {
			for _, b := range e.EventLogs {
				if b != nil {
					subEventLogs = append(subEventLogs, b.ToMongo())
				}
			}
		}
	}
	resp.EventLogs = subEventLogs
	if len(e.Products) > 0 {
		resp.Products = bom.ToObjects(e.Products)
	}
	// create time object
	utExpiredAt := time.Unix(e.ExpiredAt.GetSeconds(), int64(e.ExpiredAt.GetNanos()))
	resp.ExpiredAt = utExpiredAt
	// create time object
	utCreatedAt := time.Unix(e.CreatedAt.GetSeconds(), int64(e.CreatedAt.GetNanos()))
	resp.CreatedAt = utCreatedAt
	// create time object
	utUpdatedAt := time.Unix(e.UpdatedAt.GetSeconds(), int64(e.UpdatedAt.GetNanos()))
	resp.UpdatedAt = utUpdatedAt
	// create time object
	utActivatedAt := time.Unix(e.ActivatedAt.GetSeconds(), int64(e.ActivatedAt.GetNanos()))
	resp.ActivatedAt = utActivatedAt
	// oneof link
	if e.GetClosedAtField() != nil {
		linkClosedAt := e.GetClosedAt()
		if linkClosedAt != nil {
			utClosedAt := time.Unix(linkClosedAt.GetSeconds(), int64(linkClosedAt.GetNanos()))
			resp.ClosedAt = &utClosedAt
		}
	}

	// create time object
	utStartDateOfReportingPeriod := time.Unix(e.StartDateOfReportingPeriod.GetSeconds(), int64(e.StartDateOfReportingPeriod.GetNanos()))
	resp.StartDateOfReportingPeriod = utStartDateOfReportingPeriod

	// bom connection
	resp.bom = ContractServiceBomWrapper().WithColl("contract")

	return &resp
}

func (e *ContractMongo) WithObjectId() *ContractMongo {
	e.Id = primitive.NewObjectID() // create object id
	return e
}

// create MongoDB Model from protobuf (ContractMongo)
type ContractMongo struct {
	Id                         primitive.ObjectID       `_id, omitempty`
	ContractType               *ContractTypeMongo       `json:"contracttype"`
	PublicId                   string                   `json:"publicid"`
	ProviderId                 primitive.ObjectID       `json:"providerid"`
	MerchantId                 primitive.ObjectID       `json:"merchantid"`
	IsAllProductsInvolved      bool                     `json:"isallproductsinvolved"`
	Status                     ContractStatus           `json:"status"`
	ProgressPercent            int32                    `json:"progresspercent"`
	EventLogs                  []*ProgressEventLogMongo `json:"eventlogs"`
	Products                   []primitive.ObjectID     `json:"products"`
	ExpiredAt                  time.Time                `json:"expiredat"`
	CreatedAt                  time.Time                `json:"createdat"`
	UpdatedAt                  time.Time                `json:"updatedat"`
	ActivatedAt                time.Time                `json:"activatedat"`
	ClosedAt                   *time.Time               `json:"closedat"`
	StartDateOfReportingPeriod time.Time                `json:"startdateofreportingperiod"`
	bom                        *bom.Bom
}

//Check method ClosedAt - update field
func (e *ContractMongo) GetClosedAt() time.Time {
	var resp time.Time
	if e.ClosedAt != nil {
		resp = *((*time.Time)(unsafe.Pointer(e.ClosedAt)))
	}
	return resp
}

// isValid - validation method of the described protobuf structure
func (e *ContractMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

// set custom bom wrapper
func (e *ContractMongo) SetBom(bom *bom.Bom) *ContractMongo {
	e.bom = bom.WithColl("contract")
	return e
}

// GetSourceBom - Get the source object
func (e *ContractMongo) GetBom() *bom.Bom {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	return e.bom
}

//
// create ContractMongo mongo model of protobuf Contract
//
func NewContractMongo() *ContractMongo {
	return &ContractMongo{bom: ContractServiceBomWrapper().WithColl("contract")}
}

// InsertOne method
func (e *ContractMongo) InsertOne() (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.Id = primitive.NewObjectID() // create object id
	res, err := e.bom.InsertOne(e)
	if err != nil {
		return nil, err
	}
	if insertId, ok := res.InsertedID.(primitive.ObjectID); ok {
		e.Id = insertId
	}
	return e, nil
}

// FindOneById - find method
func (e *ContractMongo) FindOneById(Id string) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractMongo{}
	err := e.bom.
		Where("_id", bom.ToObj(Id)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByPublicId - find method
func (e *ContractMongo) FindOneByPublicId(PublicId string) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractMongo{}
	err := e.bom.
		Where("publicid", PublicId).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByProviderId - find method
func (e *ContractMongo) FindOneByProviderId(ProviderId string) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractMongo{}
	err := e.bom.
		Where("providerid", bom.ToObj(ProviderId)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByMerchantId - find method
func (e *ContractMongo) FindOneByMerchantId(MerchantId string) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractMongo{}
	err := e.bom.
		Where("merchantid", bom.ToObj(MerchantId)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByIsAllProductsInvolved - find method
func (e *ContractMongo) FindOneByIsAllProductsInvolved(IsAllProductsInvolved bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractMongo{}
	err := e.bom.
		Where("isallproductsinvolved", IsAllProductsInvolved).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByStatus - find method
func (e *ContractMongo) FindOneByStatus(Status ContractStatus) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractMongo{}
	err := e.bom.
		Where("status", Status).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByProgressPercent - find method
func (e *ContractMongo) FindOneByProgressPercent(ProgressPercent int32) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractMongo{}
	err := e.bom.
		Where("progresspercent", ProgressPercent).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByContractTypeId - find method
func (e *ContractMongo) FindOneByContractTypeId(ContractTypeId string) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractMongo{}
	err := e.bom.
		Where("contracttypeid", bom.ToObj(ContractTypeId)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

//Update - update model method, a check is made on existing fields.
func (e *ContractMongo) Update(updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var flatFields []primitive.E
	var upResult primitive.D
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// set ContractType
	if e.ContractType != nil {
		flatFields = append(flatFields, primitive.E{Key: "contracttype", Value: e.ContractType})
	}
	// set PublicId
	if len(e.PublicId) > 0 {
		flatFields = append(flatFields, primitive.E{Key: "publicid", Value: e.PublicId})
	}
	// set ProviderId
	if e.ProviderId.Hex() != "000000000000000000000000" {
		flatFields = append(flatFields, primitive.E{Key: "providerid", Value: e.ProviderId})
	}
	// set MerchantId
	if e.MerchantId.Hex() != "000000000000000000000000" {
		flatFields = append(flatFields, primitive.E{Key: "merchantid", Value: e.MerchantId})
	}
	// set IsAllProductsInvolved
	if e.IsAllProductsInvolved {
		flatFields = append(flatFields, primitive.E{Key: "isallproductsinvolved", Value: e.IsAllProductsInvolved})
	}
	// set Status
	if e.Status > 0 {
		flatFields = append(flatFields, primitive.E{Key: "status", Value: e.Status})
	}
	// set ProgressPercent
	if e.ProgressPercent > 0 {
		flatFields = append(flatFields, primitive.E{Key: "progresspercent", Value: e.ProgressPercent})
	}
	// set EventLogs
	if e.EventLogs != nil {
		flatFields = append(flatFields, primitive.E{Key: "eventlogs", Value: e.EventLogs})
	}
	// set Products
	if len(e.Products) > 0 {
		flatFields = append(flatFields, primitive.E{Key: "products", Value: e.Products})
	}
	// set ExpiredAt
	if !e.ExpiredAt.IsZero() {
		flatFields = append(flatFields, primitive.E{Key: "expiredat", Value: e.ExpiredAt})
	}
	// set ActivatedAt
	if !e.ActivatedAt.IsZero() {
		flatFields = append(flatFields, primitive.E{Key: "activatedat", Value: e.ActivatedAt})
	}
	// set ClosedAt
	if e.ClosedAt != nil {
		flatFields = append(flatFields, primitive.E{Key: "closedat", Value: e.GetClosedAt()})
	}
	// set StartDateOfReportingPeriod
	if !e.StartDateOfReportingPeriod.IsZero() {
		flatFields = append(flatFields, primitive.E{Key: "startdateofreportingperiod", Value: e.StartDateOfReportingPeriod})
	}
	if updateAt {
		upResult = primitive.D{
			{"$set", flatFields},
			{"$currentDate", primitive.D{{"updatedat", true}}},
		}
	} else {
		upResult = primitive.D{
			{"$set", flatFields},
		}
	}
	_, err := e.bom.UpdateRaw(upResult)
	if err != nil {
		return e, err
	}
	return e, nil
}

func (e *ContractMongo) WhereId(id string) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq("_id", bom.ToObj(id))
	return e
}

func (e *ContractMongo) WhereIds(ids []string) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere("_id", bom.ToObjects(ids))
	return e
}

// Find  find method
func (e *ContractMongo) FindOne() (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractMongo{}
	err := e.bom.
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// Iteration - full iteration method (note that an anonymous function return false to continue)
// the method is based on the last element pagination mechanism
func (e *ContractMongo) Iteration(fn func(contract []*ContractMongo) bool, size int32) error {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// set size
	e.Size(size)
	contract, lastId, err := e.ListWithLastId()
	// first start
	if !fn(contract) {
		return nil
	}
	for len(lastId) > 0 {
		contract, lastId, err = e.LastId(lastId).ListWithLastId()
		if !fn(contract) {
			continue
		}
	}
	return err
}

//Deprecated: should use WhereConditions or WhereEq
func (e *ContractMongo) Where(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereEq method
func (e *ContractMongo) WhereEq(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereGt method
func (e *ContractMongo) WhereGt(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGt(field, value)
	return e
}

// WhereGte method
func (e *ContractMongo) WhereGte(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGte(field, value)
	return e
}

// WhereLt method
func (e *ContractMongo) WhereLt(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLt(field, value)
	return e
}

// WhereLte method
func (e *ContractMongo) WhereLte(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLte(field, value)
	return e
}

// Limit method
func (e *ContractMongo) Limit(page int32, size int32) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLimit(&bom.Limit{Page: page, Size: size})
	return e
}

// Size method
func (e *ContractMongo) Size(size int32) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithSize(size)
	return e
}

// LastId method
func (e *ContractMongo) LastId(lastId string) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLastId(lastId)
	return e
}

// Sort method
func (e *ContractMongo) Sort(sortField string, sortType string) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	if sortField == "id" {
		sortField = "_id"
	}
	e.bom.WithSort(&bom.Sort{Field: sortField, Type: sortType})
	return e
}

// Find with pagination
func (e *ContractMongo) ListWithPagination() ([]*ContractMongo, *bom.Pagination, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ContractMongo
	paginator, err := e.bom.ListWithPagination(func(cur *mongo.Cursor) error {
		var result ContractMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, paginator, err
}

// List with last id for fast pagination
func (e *ContractMongo) ListWithLastId() ([]*ContractMongo, string, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ContractMongo
	lastId, err := e.bom.ListWithLastId(func(cur *mongo.Cursor) error {
		var result ContractMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, lastId, err
}

// Find list
func (e *ContractMongo) List() ([]*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ContractMongo
	err := e.bom.List(func(cur *mongo.Cursor) error {
		var result ContractMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, err
}

// Get bulk map
func (e *ContractMongo) GetBulkMap(ids []string) (map[string]*ContractMongo, error) {
	result := make(map[string]*ContractMongo)
	items, err := e.WhereIn("_id", bom.ToObjects(ids)).List()
	if err != nil {
		return result, err
	}
	for _, v := range items {
		result[v.Id.Hex()] = v
	}
	return result, nil
}

// Get bulk map
func (e *ContractMongo) GetBulk(ids []string) ([]*ContractMongo, error) {
	return e.WhereIn("_id", bom.ToObjects(ids)).List()
}

// WhereIn method
func (e *ContractMongo) WhereIn(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere(field, value)
	return e
}

// WhereNotIn method
func (e *ContractMongo) WhereNotIn(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// exist in bom version >= 1.0.11
	e.bom.NotInWhere(field, value)
	return e
}

//Deprecated: should use OrWhereEq
func (e *ContractMongo) OrWhere(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// WhereNotEq
func (e *ContractMongo) WhereNotEq(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereNotEq(field, value)
	return e
}

// OrWhereEq method
func (e *ContractMongo) OrWhereEq(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// OrWhereGt method
func (e *ContractMongo) OrWhereGt(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGt(field, value)
	return e
}

// OrWhereGte method
func (e *ContractMongo) OrWhereGte(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGte(field, value)
	return e
}

// OrWhereLt method
func (e *ContractMongo) OrWhereLt(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLt(field, value)
	return e
}

// OrWhereLte method
func (e *ContractMongo) OrWhereLte(field string, value interface{}) *ContractMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLte(field, value)
	return e
}

// UpdateContractType - update field
func (e *ContractMongo) UpdateContractType(ContractType *ContractTypeMongo, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contracttype", ContractType}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contracttype", ContractType}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdatePublicId - update field
func (e *ContractMongo) UpdatePublicId(PublicId string, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"publicid", PublicId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"publicid", PublicId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateProviderId - update field
func (e *ContractMongo) UpdateProviderId(ProviderId string, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"providerid", ProviderId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"providerid", ProviderId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateMerchantId - update field
func (e *ContractMongo) UpdateMerchantId(MerchantId string, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"merchantid", MerchantId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"merchantid", MerchantId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateIsAllProductsInvolved - update field
func (e *ContractMongo) UpdateIsAllProductsInvolved(IsAllProductsInvolved bool, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"isallproductsinvolved", IsAllProductsInvolved}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"isallproductsinvolved", IsAllProductsInvolved}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateStatus - update field
func (e *ContractMongo) UpdateStatus(Status ContractStatus, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"status", Status}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"status", Status}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateProgressPercent - update field
func (e *ContractMongo) UpdateProgressPercent(ProgressPercent int32, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"progresspercent", ProgressPercent}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"progresspercent", ProgressPercent}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateEventLogs - update field
func (e *ContractMongo) UpdateEventLogs(EventLogs []*ProgressEventLogMongo, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"eventlogs", EventLogs}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"eventlogs", EventLogs}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateProducts - update field
func (e *ContractMongo) UpdateProducts(Products []string, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"products", Products}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"products", Products}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateExpiredAt - update field
func (e *ContractMongo) UpdateExpiredAt(ExpiredAt time.Time, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"expiredat", ExpiredAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"expiredat", ExpiredAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateCreatedAt - update field
func (e *ContractMongo) UpdateCreatedAt(CreatedAt time.Time, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"createdat", CreatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"createdat", CreatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateUpdatedAt - update field
func (e *ContractMongo) UpdateUpdatedAt(UpdatedAt time.Time, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"updatedat", UpdatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"updatedat", UpdatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateActivatedAt - update field
func (e *ContractMongo) UpdateActivatedAt(ActivatedAt time.Time, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"activatedat", ActivatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"activatedat", ActivatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateClosedAt - update field
func (e *ContractMongo) UpdateClosedAt(ClosedAt time.Time, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"closedat", ClosedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"closedat", ClosedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateStartDateOfReportingPeriod - update field
func (e *ContractMongo) UpdateStartDateOfReportingPeriod(StartDateOfReportingPeriod time.Time, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"startdateofreportingperiod", StartDateOfReportingPeriod}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"startdateofreportingperiod", StartDateOfReportingPeriod}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateContractTypeId - update field
func (e *ContractMongo) UpdateContractTypeId(ContractTypeId string, updateAt bool) (*ContractMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contracttypeid", ContractTypeId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contracttypeid", ContractTypeId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

func (e *ContractTypeMongo) ToPB() *ContractType {
	var resp ContractType
	if !e.Id.IsZero() {
		resp.Id = e.Id.Hex()
	}
	resp.Name = e.Name
	resp.Description = e.Description
	// create single pb
	if e.ConditionsOfAchievement != nil {
		resp.ConditionsOfAchievement = e.ConditionsOfAchievement.ToPB()
	}
	ptapCreatedAt, _ := ptypes.TimestampProto(e.CreatedAt)
	resp.CreatedAt = ptapCreatedAt
	ptapUpdatedAt, _ := ptypes.TimestampProto(e.UpdatedAt)
	resp.UpdatedAt = ptapUpdatedAt
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *ContractType) ToMongo() *ContractTypeMongo {
	var resp ContractTypeMongo
	if len(e.Id) > 0 {
		resp.Id = bom.ToObj(e.Id)
	}
	resp.Name = e.Name
	resp.Description = e.Description
	// create single mongo
	if e.ConditionsOfAchievement != nil {
		resp.ConditionsOfAchievement = e.ConditionsOfAchievement.ToMongo()
	}
	// create time object
	utCreatedAt := time.Unix(e.CreatedAt.GetSeconds(), int64(e.CreatedAt.GetNanos()))
	resp.CreatedAt = utCreatedAt
	// create time object
	utUpdatedAt := time.Unix(e.UpdatedAt.GetSeconds(), int64(e.UpdatedAt.GetNanos()))
	resp.UpdatedAt = utUpdatedAt

	// bom connection
	resp.bom = ContractServiceBomWrapper().WithColl("contract_type")

	return &resp
}

func (e *ContractTypeMongo) WithObjectId() *ContractTypeMongo {
	e.Id = primitive.NewObjectID() // create object id
	return e
}

// create MongoDB Model from protobuf (ContractTypeMongo)
type ContractTypeMongo struct {
	Id                      primitive.ObjectID           `_id, omitempty`
	Name                    string                       `json:"name"`
	Description             string                       `json:"description"`
	ConditionsOfAchievement *ConditionOfAchievementMongo `json:"conditionsofachievement"`
	CreatedAt               time.Time                    `json:"createdat"`
	UpdatedAt               time.Time                    `json:"updatedat"`
	bom                     *bom.Bom
}

// isValid - validation method of the described protobuf structure
func (e *ContractTypeMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

// set custom bom wrapper
func (e *ContractTypeMongo) SetBom(bom *bom.Bom) *ContractTypeMongo {
	e.bom = bom.WithColl("contract_type")
	return e
}

// GetSourceBom - Get the source object
func (e *ContractTypeMongo) GetBom() *bom.Bom {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	return e.bom
}

//
// create ContractTypeMongo mongo model of protobuf ContractType
//
func NewContractTypeMongo() *ContractTypeMongo {
	return &ContractTypeMongo{bom: ContractServiceBomWrapper().WithColl("contract_type")}
}

// InsertOne method
func (e *ContractTypeMongo) InsertOne() (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.Id = primitive.NewObjectID() // create object id
	res, err := e.bom.InsertOne(e)
	if err != nil {
		return nil, err
	}
	if insertId, ok := res.InsertedID.(primitive.ObjectID); ok {
		e.Id = insertId
	}
	return e, nil
}

// FindOneById - find method
func (e *ContractTypeMongo) FindOneById(Id string) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractTypeMongo{}
	err := e.bom.
		Where("_id", bom.ToObj(Id)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByName - find method
func (e *ContractTypeMongo) FindOneByName(Name string) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractTypeMongo{}
	err := e.bom.
		Where("name", Name).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByDescription - find method
func (e *ContractTypeMongo) FindOneByDescription(Description string) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractTypeMongo{}
	err := e.bom.
		Where("description", Description).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByActive - find method
func (e *ContractTypeMongo) FindOneByActive(Active bool) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractTypeMongo{}
	err := e.bom.
		Where("active", Active).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

//Update - update model method, a check is made on existing fields.
func (e *ContractTypeMongo) Update(updateAt bool) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var flatFields []primitive.E
	var upResult primitive.D
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// set Name
	if len(e.Name) > 0 {
		flatFields = append(flatFields, primitive.E{Key: "name", Value: e.Name})
	}
	// set Description
	if len(e.Description) > 0 {
		flatFields = append(flatFields, primitive.E{Key: "description", Value: e.Description})
	}
	// set ConditionsOfAchievement
	if e.ConditionsOfAchievement != nil {
		flatFields = append(flatFields, primitive.E{Key: "conditionsofachievement", Value: e.ConditionsOfAchievement})
	}
	if updateAt {
		upResult = primitive.D{
			{"$set", flatFields},
			{"$currentDate", primitive.D{{"updatedat", true}}},
		}
	} else {
		upResult = primitive.D{
			{"$set", flatFields},
		}
	}
	_, err := e.bom.UpdateRaw(upResult)
	if err != nil {
		return e, err
	}
	return e, nil
}

func (e *ContractTypeMongo) WhereId(id string) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq("_id", bom.ToObj(id))
	return e
}

func (e *ContractTypeMongo) WhereIds(ids []string) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere("_id", bom.ToObjects(ids))
	return e
}

// Find  find method
func (e *ContractTypeMongo) FindOne() (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ContractTypeMongo{}
	err := e.bom.
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// Iteration - full iteration method (note that an anonymous function return false to continue)
// the method is based on the last element pagination mechanism
func (e *ContractTypeMongo) Iteration(fn func(contracttype []*ContractTypeMongo) bool, size int32) error {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// set size
	e.Size(size)
	contracttype, lastId, err := e.ListWithLastId()
	// first start
	if !fn(contracttype) {
		return nil
	}
	for len(lastId) > 0 {
		contracttype, lastId, err = e.LastId(lastId).ListWithLastId()
		if !fn(contracttype) {
			continue
		}
	}
	return err
}

//Deprecated: should use WhereConditions or WhereEq
func (e *ContractTypeMongo) Where(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereEq method
func (e *ContractTypeMongo) WhereEq(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereGt method
func (e *ContractTypeMongo) WhereGt(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGt(field, value)
	return e
}

// WhereGte method
func (e *ContractTypeMongo) WhereGte(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGte(field, value)
	return e
}

// WhereLt method
func (e *ContractTypeMongo) WhereLt(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLt(field, value)
	return e
}

// WhereLte method
func (e *ContractTypeMongo) WhereLte(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLte(field, value)
	return e
}

// Limit method
func (e *ContractTypeMongo) Limit(page int32, size int32) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLimit(&bom.Limit{Page: page, Size: size})
	return e
}

// Size method
func (e *ContractTypeMongo) Size(size int32) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithSize(size)
	return e
}

// LastId method
func (e *ContractTypeMongo) LastId(lastId string) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLastId(lastId)
	return e
}

// Sort method
func (e *ContractTypeMongo) Sort(sortField string, sortType string) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	if sortField == "id" {
		sortField = "_id"
	}
	e.bom.WithSort(&bom.Sort{Field: sortField, Type: sortType})
	return e
}

// Find with pagination
func (e *ContractTypeMongo) ListWithPagination() ([]*ContractTypeMongo, *bom.Pagination, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ContractTypeMongo
	paginator, err := e.bom.ListWithPagination(func(cur *mongo.Cursor) error {
		var result ContractTypeMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, paginator, err
}

// List with last id for fast pagination
func (e *ContractTypeMongo) ListWithLastId() ([]*ContractTypeMongo, string, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ContractTypeMongo
	lastId, err := e.bom.ListWithLastId(func(cur *mongo.Cursor) error {
		var result ContractTypeMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, lastId, err
}

// Find list
func (e *ContractTypeMongo) List() ([]*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ContractTypeMongo
	err := e.bom.List(func(cur *mongo.Cursor) error {
		var result ContractTypeMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, err
}

// Get bulk map
func (e *ContractTypeMongo) GetBulkMap(ids []string) (map[string]*ContractTypeMongo, error) {
	result := make(map[string]*ContractTypeMongo)
	items, err := e.WhereIn("_id", bom.ToObjects(ids)).List()
	if err != nil {
		return result, err
	}
	for _, v := range items {
		result[v.Id.Hex()] = v
	}
	return result, nil
}

// Get bulk map
func (e *ContractTypeMongo) GetBulk(ids []string) ([]*ContractTypeMongo, error) {
	return e.WhereIn("_id", bom.ToObjects(ids)).List()
}

// WhereIn method
func (e *ContractTypeMongo) WhereIn(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere(field, value)
	return e
}

// WhereNotIn method
func (e *ContractTypeMongo) WhereNotIn(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// exist in bom version >= 1.0.11
	e.bom.NotInWhere(field, value)
	return e
}

//Deprecated: should use OrWhereEq
func (e *ContractTypeMongo) OrWhere(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// WhereNotEq
func (e *ContractTypeMongo) WhereNotEq(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereNotEq(field, value)
	return e
}

// OrWhereEq method
func (e *ContractTypeMongo) OrWhereEq(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// OrWhereGt method
func (e *ContractTypeMongo) OrWhereGt(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGt(field, value)
	return e
}

// OrWhereGte method
func (e *ContractTypeMongo) OrWhereGte(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGte(field, value)
	return e
}

// OrWhereLt method
func (e *ContractTypeMongo) OrWhereLt(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLt(field, value)
	return e
}

// OrWhereLte method
func (e *ContractTypeMongo) OrWhereLte(field string, value interface{}) *ContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLte(field, value)
	return e
}

// UpdateName - update field
func (e *ContractTypeMongo) UpdateName(Name string, updateAt bool) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractTypeMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"name", Name}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"name", Name}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateDescription - update field
func (e *ContractTypeMongo) UpdateDescription(Description string, updateAt bool) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractTypeMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"description", Description}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"description", Description}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateConditionsOfAchievement - update field
func (e *ContractTypeMongo) UpdateConditionsOfAchievement(ConditionsOfAchievement *ConditionOfAchievementMongo, updateAt bool) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractTypeMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"conditionsofachievement", ConditionsOfAchievement}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"conditionsofachievement", ConditionsOfAchievement}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateCreatedAt - update field
func (e *ContractTypeMongo) UpdateCreatedAt(CreatedAt time.Time, updateAt bool) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractTypeMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"createdat", CreatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"createdat", CreatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateUpdatedAt - update field
func (e *ContractTypeMongo) UpdateUpdatedAt(UpdatedAt time.Time, updateAt bool) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractTypeMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"updatedat", UpdatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"updatedat", UpdatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateActive - update field
func (e *ContractTypeMongo) UpdateActive(Active bool, updateAt bool) (*ContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ContractTypeMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"active", Active}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"active", Active}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

func (e *ConditionOfAchievementMongo) ToPB() *ConditionOfAchievement {
	var resp ConditionOfAchievement
	resp.Operator = e.Operator
	// create nested pb
	var subConditionAliases []*Condition
	if e.ConditionAliases != nil {
		if len(e.ConditionAliases) > 0 {
			for _, b := range e.ConditionAliases {
				subConditionAliases = append(subConditionAliases, b.ToPB())
			}
		}
	}
	resp.ConditionAliases = subConditionAliases
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *ConditionOfAchievement) ToMongo() *ConditionOfAchievementMongo {
	var resp ConditionOfAchievementMongo
	resp.Operator = e.Operator
	// create nested mongo
	var subConditionAliases []*ConditionMongo
	if e.ConditionAliases != nil {
		if len(e.ConditionAliases) > 0 {
			for _, b := range e.ConditionAliases {
				if b != nil {
					subConditionAliases = append(subConditionAliases, b.ToMongo())
				}
			}
		}
	}
	resp.ConditionAliases = subConditionAliases

	// bom connection
	resp.bom = ContractServiceBomWrapper().WithColl("conditionofachievement")

	return &resp
}

// create MongoDB Model from protobuf (ConditionOfAchievementMongo)
type ConditionOfAchievementMongo struct {
	Operator         ConditionsOperators `json:"operator"`
	ConditionAliases []*ConditionMongo   `json:"conditionaliases"`
	bom              *bom.Bom
}

// isValid - validation method of the described protobuf structure
func (e *ConditionOfAchievementMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

// set custom bom wrapper
func (e *ConditionOfAchievementMongo) SetBom(bom *bom.Bom) *ConditionOfAchievementMongo {
	e.bom = bom.WithColl("conditionofachievement")
	return e
}

// GetSourceBom - Get the source object
func (e *ConditionOfAchievementMongo) GetBom() *bom.Bom {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	return e.bom
}

//
// create ConditionOfAchievementMongo mongo model of protobuf ConditionOfAchievement
//
func NewConditionOfAchievementMongo() *ConditionOfAchievementMongo {
	return &ConditionOfAchievementMongo{bom: ContractServiceBomWrapper().WithColl("conditionofachievement")}
}

// InsertOne method
func (e *ConditionOfAchievementMongo) InsertOne() (*ConditionOfAchievementMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	_, err := e.bom.InsertOne(e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// FindOneByOperator - find method
func (e *ConditionOfAchievementMongo) FindOneByOperator(Operator ConditionsOperators) (*ConditionOfAchievementMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ConditionOfAchievementMongo{}
	err := e.bom.
		Where("operator", Operator).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

//Update - update model method, a check is made on existing fields.
func (e *ConditionOfAchievementMongo) Update(updateAt bool) (*ConditionOfAchievementMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var flatFields []primitive.E
	var upResult primitive.D
	// set Operator
	if e.Operator > 0 {
		flatFields = append(flatFields, primitive.E{Key: "operator", Value: e.Operator})
	}
	// set ConditionAliases
	if e.ConditionAliases != nil {
		flatFields = append(flatFields, primitive.E{Key: "conditionaliases", Value: e.ConditionAliases})
	}
	if updateAt {
		upResult = primitive.D{
			{"$set", flatFields},
			{"$currentDate", primitive.D{{"updatedat", true}}},
		}
	} else {
		upResult = primitive.D{
			{"$set", flatFields},
		}
	}
	_, err := e.bom.UpdateRaw(upResult)
	if err != nil {
		return e, err
	}
	return e, nil
}

// Find  find method
func (e *ConditionOfAchievementMongo) FindOne() (*ConditionOfAchievementMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ConditionOfAchievementMongo{}
	err := e.bom.
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

//Deprecated: should use WhereConditions or WhereEq
func (e *ConditionOfAchievementMongo) Where(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereEq method
func (e *ConditionOfAchievementMongo) WhereEq(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereGt method
func (e *ConditionOfAchievementMongo) WhereGt(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGt(field, value)
	return e
}

// WhereGte method
func (e *ConditionOfAchievementMongo) WhereGte(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGte(field, value)
	return e
}

// WhereLt method
func (e *ConditionOfAchievementMongo) WhereLt(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLt(field, value)
	return e
}

// WhereLte method
func (e *ConditionOfAchievementMongo) WhereLte(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLte(field, value)
	return e
}

// Limit method
func (e *ConditionOfAchievementMongo) Limit(page int32, size int32) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLimit(&bom.Limit{Page: page, Size: size})
	return e
}

// Size method
func (e *ConditionOfAchievementMongo) Size(size int32) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithSize(size)
	return e
}

// LastId method
func (e *ConditionOfAchievementMongo) LastId(lastId string) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLastId(lastId)
	return e
}

// Sort method
func (e *ConditionOfAchievementMongo) Sort(sortField string, sortType string) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	if sortField == "id" {
		sortField = "_id"
	}
	e.bom.WithSort(&bom.Sort{Field: sortField, Type: sortType})
	return e
}

// Find with pagination
func (e *ConditionOfAchievementMongo) ListWithPagination() ([]*ConditionOfAchievementMongo, *bom.Pagination, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ConditionOfAchievementMongo
	paginator, err := e.bom.ListWithPagination(func(cur *mongo.Cursor) error {
		var result ConditionOfAchievementMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, paginator, err
}

// List with last id for fast pagination
func (e *ConditionOfAchievementMongo) ListWithLastId() ([]*ConditionOfAchievementMongo, string, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ConditionOfAchievementMongo
	lastId, err := e.bom.ListWithLastId(func(cur *mongo.Cursor) error {
		var result ConditionOfAchievementMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, lastId, err
}

// Find list
func (e *ConditionOfAchievementMongo) List() ([]*ConditionOfAchievementMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ConditionOfAchievementMongo
	err := e.bom.List(func(cur *mongo.Cursor) error {
		var result ConditionOfAchievementMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, err
}

// WhereIn method
func (e *ConditionOfAchievementMongo) WhereIn(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere(field, value)
	return e
}

// WhereNotIn method
func (e *ConditionOfAchievementMongo) WhereNotIn(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// exist in bom version >= 1.0.11
	e.bom.NotInWhere(field, value)
	return e
}

//Deprecated: should use OrWhereEq
func (e *ConditionOfAchievementMongo) OrWhere(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// WhereNotEq
func (e *ConditionOfAchievementMongo) WhereNotEq(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereNotEq(field, value)
	return e
}

// OrWhereEq method
func (e *ConditionOfAchievementMongo) OrWhereEq(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// OrWhereGt method
func (e *ConditionOfAchievementMongo) OrWhereGt(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGt(field, value)
	return e
}

// OrWhereGte method
func (e *ConditionOfAchievementMongo) OrWhereGte(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGte(field, value)
	return e
}

// OrWhereLt method
func (e *ConditionOfAchievementMongo) OrWhereLt(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLt(field, value)
	return e
}

// OrWhereLte method
func (e *ConditionOfAchievementMongo) OrWhereLte(field string, value interface{}) *ConditionOfAchievementMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLte(field, value)
	return e
}

// UpdateOperator - update field
func (e *ConditionOfAchievementMongo) UpdateOperator(Operator ConditionsOperators, updateAt bool) (*ConditionOfAchievementMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// mongoModel := ConditionOfAchievementMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"operator", Operator}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"operator", Operator}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateConditionAliases - update field
func (e *ConditionOfAchievementMongo) UpdateConditionAliases(ConditionAliases []*ConditionMongo, updateAt bool) (*ConditionOfAchievementMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// mongoModel := ConditionOfAchievementMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"conditionaliases", ConditionAliases}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"conditionaliases", ConditionAliases}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

func (e *ConditionMongo) ToPB() *Condition {
	var resp Condition
	resp.Code = e.Code
	ttArguments := make(map[string]string)
	for k, v := range e.Arguments {
		ttArguments[k] = v
	}
	resp.Arguments = ttArguments
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *Condition) ToMongo() *ConditionMongo {
	var resp ConditionMongo
	resp.Code = e.Code
	ttArguments := make(map[string]string)
	for k, v := range e.Arguments {
		ttArguments[k] = v
	}
	resp.Arguments = ttArguments

	// bom connection
	resp.bom = ContractServiceBomWrapper().WithColl("condition")

	return &resp
}

// create MongoDB Model from protobuf (ConditionMongo)
type ConditionMongo struct {
	Code      ContractCharacterCode `json:"code"`
	Arguments map[string]string     `json:"arguments"`
	bom       *bom.Bom
}

// isValid - validation method of the described protobuf structure
func (e *ConditionMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

// set custom bom wrapper
func (e *ConditionMongo) SetBom(bom *bom.Bom) *ConditionMongo {
	e.bom = bom.WithColl("condition")
	return e
}

// GetSourceBom - Get the source object
func (e *ConditionMongo) GetBom() *bom.Bom {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	return e.bom
}

//
// create ConditionMongo mongo model of protobuf Condition
//
func NewConditionMongo() *ConditionMongo {
	return &ConditionMongo{bom: ContractServiceBomWrapper().WithColl("condition")}
}

// InsertOne method
func (e *ConditionMongo) InsertOne() (*ConditionMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	_, err := e.bom.InsertOne(e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// FindOneByCode - find method
func (e *ConditionMongo) FindOneByCode(Code ContractCharacterCode) (*ConditionMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ConditionMongo{}
	err := e.bom.
		Where("code", Code).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

//Update - update model method, a check is made on existing fields.
func (e *ConditionMongo) Update(updateAt bool) (*ConditionMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var flatFields []primitive.E
	var upResult primitive.D
	// set Code
	if e.Code > 0 {
		flatFields = append(flatFields, primitive.E{Key: "code", Value: e.Code})
	}
	// set Arguments
	if len(e.Arguments) > 0 {
		flatFields = append(flatFields, primitive.E{Key: "arguments", Value: e.Arguments})
	}
	if updateAt {
		upResult = primitive.D{
			{"$set", flatFields},
			{"$currentDate", primitive.D{{"updatedat", true}}},
		}
	} else {
		upResult = primitive.D{
			{"$set", flatFields},
		}
	}
	_, err := e.bom.UpdateRaw(upResult)
	if err != nil {
		return e, err
	}
	return e, nil
}

// Find  find method
func (e *ConditionMongo) FindOne() (*ConditionMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ConditionMongo{}
	err := e.bom.
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

//Deprecated: should use WhereConditions or WhereEq
func (e *ConditionMongo) Where(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereEq method
func (e *ConditionMongo) WhereEq(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereGt method
func (e *ConditionMongo) WhereGt(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGt(field, value)
	return e
}

// WhereGte method
func (e *ConditionMongo) WhereGte(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGte(field, value)
	return e
}

// WhereLt method
func (e *ConditionMongo) WhereLt(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLt(field, value)
	return e
}

// WhereLte method
func (e *ConditionMongo) WhereLte(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLte(field, value)
	return e
}

// Limit method
func (e *ConditionMongo) Limit(page int32, size int32) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLimit(&bom.Limit{Page: page, Size: size})
	return e
}

// Size method
func (e *ConditionMongo) Size(size int32) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithSize(size)
	return e
}

// LastId method
func (e *ConditionMongo) LastId(lastId string) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLastId(lastId)
	return e
}

// Sort method
func (e *ConditionMongo) Sort(sortField string, sortType string) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	if sortField == "id" {
		sortField = "_id"
	}
	e.bom.WithSort(&bom.Sort{Field: sortField, Type: sortType})
	return e
}

// Find with pagination
func (e *ConditionMongo) ListWithPagination() ([]*ConditionMongo, *bom.Pagination, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ConditionMongo
	paginator, err := e.bom.ListWithPagination(func(cur *mongo.Cursor) error {
		var result ConditionMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, paginator, err
}

// List with last id for fast pagination
func (e *ConditionMongo) ListWithLastId() ([]*ConditionMongo, string, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ConditionMongo
	lastId, err := e.bom.ListWithLastId(func(cur *mongo.Cursor) error {
		var result ConditionMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, lastId, err
}

// Find list
func (e *ConditionMongo) List() ([]*ConditionMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ConditionMongo
	err := e.bom.List(func(cur *mongo.Cursor) error {
		var result ConditionMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, err
}

// WhereIn method
func (e *ConditionMongo) WhereIn(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere(field, value)
	return e
}

// WhereNotIn method
func (e *ConditionMongo) WhereNotIn(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// exist in bom version >= 1.0.11
	e.bom.NotInWhere(field, value)
	return e
}

//Deprecated: should use OrWhereEq
func (e *ConditionMongo) OrWhere(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// WhereNotEq
func (e *ConditionMongo) WhereNotEq(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereNotEq(field, value)
	return e
}

// OrWhereEq method
func (e *ConditionMongo) OrWhereEq(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// OrWhereGt method
func (e *ConditionMongo) OrWhereGt(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGt(field, value)
	return e
}

// OrWhereGte method
func (e *ConditionMongo) OrWhereGte(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGte(field, value)
	return e
}

// OrWhereLt method
func (e *ConditionMongo) OrWhereLt(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLt(field, value)
	return e
}

// OrWhereLte method
func (e *ConditionMongo) OrWhereLte(field string, value interface{}) *ConditionMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLte(field, value)
	return e
}

// UpdateCode - update field
func (e *ConditionMongo) UpdateCode(Code ContractCharacterCode, updateAt bool) (*ConditionMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// mongoModel := ConditionMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"code", Code}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"code", Code}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateArguments - update field
func (e *ConditionMongo) UpdateArguments(Arguments map[string]string, updateAt bool) (*ConditionMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// mongoModel := ConditionMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"arguments", Arguments}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"arguments", Arguments}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

func (e *ProviderContractTypeMongo) ToPB() *ProviderContractType {
	var resp ProviderContractType
	if !e.Id.IsZero() {
		resp.Id = e.Id.Hex()
	}
	if !e.ContractTypeId.IsZero() {
		resp.ContractTypeId = e.ContractTypeId.Hex()
	}
	if !e.ProviderId.IsZero() {
		resp.ProviderId = e.ProviderId.Hex()
	}
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *ProviderContractType) ToMongo() *ProviderContractTypeMongo {
	var resp ProviderContractTypeMongo
	if len(e.Id) > 0 {
		resp.Id = bom.ToObj(e.Id)
	}
	if len(e.ContractTypeId) > 0 {
		resp.ContractTypeId = bom.ToObj(e.ContractTypeId)
	}
	if len(e.ProviderId) > 0 {
		resp.ProviderId = bom.ToObj(e.ProviderId)
	}

	// bom connection
	resp.bom = ContractServiceBomWrapper().WithColl("providers_contract_type")

	return &resp
}

func (e *ProviderContractTypeMongo) WithObjectId() *ProviderContractTypeMongo {
	e.Id = primitive.NewObjectID() // create object id
	return e
}

// create MongoDB Model from protobuf (ProviderContractTypeMongo)
type ProviderContractTypeMongo struct {
	Id             primitive.ObjectID `_id, omitempty`
	ContractTypeId primitive.ObjectID `json:"contracttypeid"`
	ProviderId     primitive.ObjectID `json:"providerid"`
	bom            *bom.Bom
}

// isValid - validation method of the described protobuf structure
func (e *ProviderContractTypeMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

// set custom bom wrapper
func (e *ProviderContractTypeMongo) SetBom(bom *bom.Bom) *ProviderContractTypeMongo {
	e.bom = bom.WithColl("providers_contract_type")
	return e
}

// GetSourceBom - Get the source object
func (e *ProviderContractTypeMongo) GetBom() *bom.Bom {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	return e.bom
}

//
// create ProviderContractTypeMongo mongo model of protobuf ProviderContractType
//
func NewProviderContractTypeMongo() *ProviderContractTypeMongo {
	return &ProviderContractTypeMongo{bom: ContractServiceBomWrapper().WithColl("providers_contract_type")}
}

// InsertOne method
func (e *ProviderContractTypeMongo) InsertOne() (*ProviderContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.Id = primitive.NewObjectID() // create object id
	res, err := e.bom.InsertOne(e)
	if err != nil {
		return nil, err
	}
	if insertId, ok := res.InsertedID.(primitive.ObjectID); ok {
		e.Id = insertId
	}
	return e, nil
}

// FindOneById - find method
func (e *ProviderContractTypeMongo) FindOneById(Id string) (*ProviderContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ProviderContractTypeMongo{}
	err := e.bom.
		Where("_id", bom.ToObj(Id)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByContractTypeId - find method
func (e *ProviderContractTypeMongo) FindOneByContractTypeId(ContractTypeId string) (*ProviderContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ProviderContractTypeMongo{}
	err := e.bom.
		Where("contracttypeid", bom.ToObj(ContractTypeId)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByProviderId - find method
func (e *ProviderContractTypeMongo) FindOneByProviderId(ProviderId string) (*ProviderContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ProviderContractTypeMongo{}
	err := e.bom.
		Where("providerid", bom.ToObj(ProviderId)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

//Update - update model method, a check is made on existing fields.
func (e *ProviderContractTypeMongo) Update(updateAt bool) (*ProviderContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var flatFields []primitive.E
	var upResult primitive.D
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// set ContractTypeId
	if e.ContractTypeId.Hex() != "000000000000000000000000" {
		flatFields = append(flatFields, primitive.E{Key: "contracttypeid", Value: e.ContractTypeId})
	}
	// set ProviderId
	if e.ProviderId.Hex() != "000000000000000000000000" {
		flatFields = append(flatFields, primitive.E{Key: "providerid", Value: e.ProviderId})
	}
	if updateAt {
		upResult = primitive.D{
			{"$set", flatFields},
			{"$currentDate", primitive.D{{"updatedat", true}}},
		}
	} else {
		upResult = primitive.D{
			{"$set", flatFields},
		}
	}
	_, err := e.bom.UpdateRaw(upResult)
	if err != nil {
		return e, err
	}
	return e, nil
}

func (e *ProviderContractTypeMongo) WhereId(id string) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq("_id", bom.ToObj(id))
	return e
}

func (e *ProviderContractTypeMongo) WhereIds(ids []string) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere("_id", bom.ToObjects(ids))
	return e
}

// Find  find method
func (e *ProviderContractTypeMongo) FindOne() (*ProviderContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ProviderContractTypeMongo{}
	err := e.bom.
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// Iteration - full iteration method (note that an anonymous function return false to continue)
// the method is based on the last element pagination mechanism
func (e *ProviderContractTypeMongo) Iteration(fn func(providercontracttype []*ProviderContractTypeMongo) bool, size int32) error {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// set size
	e.Size(size)
	providercontracttype, lastId, err := e.ListWithLastId()
	// first start
	if !fn(providercontracttype) {
		return nil
	}
	for len(lastId) > 0 {
		providercontracttype, lastId, err = e.LastId(lastId).ListWithLastId()
		if !fn(providercontracttype) {
			continue
		}
	}
	return err
}

//Deprecated: should use WhereConditions or WhereEq
func (e *ProviderContractTypeMongo) Where(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereEq method
func (e *ProviderContractTypeMongo) WhereEq(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereGt method
func (e *ProviderContractTypeMongo) WhereGt(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGt(field, value)
	return e
}

// WhereGte method
func (e *ProviderContractTypeMongo) WhereGte(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGte(field, value)
	return e
}

// WhereLt method
func (e *ProviderContractTypeMongo) WhereLt(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLt(field, value)
	return e
}

// WhereLte method
func (e *ProviderContractTypeMongo) WhereLte(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLte(field, value)
	return e
}

// Limit method
func (e *ProviderContractTypeMongo) Limit(page int32, size int32) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLimit(&bom.Limit{Page: page, Size: size})
	return e
}

// Size method
func (e *ProviderContractTypeMongo) Size(size int32) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithSize(size)
	return e
}

// LastId method
func (e *ProviderContractTypeMongo) LastId(lastId string) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLastId(lastId)
	return e
}

// Sort method
func (e *ProviderContractTypeMongo) Sort(sortField string, sortType string) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	if sortField == "id" {
		sortField = "_id"
	}
	e.bom.WithSort(&bom.Sort{Field: sortField, Type: sortType})
	return e
}

// Find with pagination
func (e *ProviderContractTypeMongo) ListWithPagination() ([]*ProviderContractTypeMongo, *bom.Pagination, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ProviderContractTypeMongo
	paginator, err := e.bom.ListWithPagination(func(cur *mongo.Cursor) error {
		var result ProviderContractTypeMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, paginator, err
}

// List with last id for fast pagination
func (e *ProviderContractTypeMongo) ListWithLastId() ([]*ProviderContractTypeMongo, string, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ProviderContractTypeMongo
	lastId, err := e.bom.ListWithLastId(func(cur *mongo.Cursor) error {
		var result ProviderContractTypeMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, lastId, err
}

// Find list
func (e *ProviderContractTypeMongo) List() ([]*ProviderContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ProviderContractTypeMongo
	err := e.bom.List(func(cur *mongo.Cursor) error {
		var result ProviderContractTypeMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, err
}

// Get bulk map
func (e *ProviderContractTypeMongo) GetBulkMap(ids []string) (map[string]*ProviderContractTypeMongo, error) {
	result := make(map[string]*ProviderContractTypeMongo)
	items, err := e.WhereIn("_id", bom.ToObjects(ids)).List()
	if err != nil {
		return result, err
	}
	for _, v := range items {
		result[v.Id.Hex()] = v
	}
	return result, nil
}

// Get bulk map
func (e *ProviderContractTypeMongo) GetBulk(ids []string) ([]*ProviderContractTypeMongo, error) {
	return e.WhereIn("_id", bom.ToObjects(ids)).List()
}

// WhereIn method
func (e *ProviderContractTypeMongo) WhereIn(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere(field, value)
	return e
}

// WhereNotIn method
func (e *ProviderContractTypeMongo) WhereNotIn(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// exist in bom version >= 1.0.11
	e.bom.NotInWhere(field, value)
	return e
}

//Deprecated: should use OrWhereEq
func (e *ProviderContractTypeMongo) OrWhere(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// WhereNotEq
func (e *ProviderContractTypeMongo) WhereNotEq(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereNotEq(field, value)
	return e
}

// OrWhereEq method
func (e *ProviderContractTypeMongo) OrWhereEq(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// OrWhereGt method
func (e *ProviderContractTypeMongo) OrWhereGt(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGt(field, value)
	return e
}

// OrWhereGte method
func (e *ProviderContractTypeMongo) OrWhereGte(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGte(field, value)
	return e
}

// OrWhereLt method
func (e *ProviderContractTypeMongo) OrWhereLt(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLt(field, value)
	return e
}

// OrWhereLte method
func (e *ProviderContractTypeMongo) OrWhereLte(field string, value interface{}) *ProviderContractTypeMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLte(field, value)
	return e
}

// UpdateContractTypeId - update field
func (e *ProviderContractTypeMongo) UpdateContractTypeId(ContractTypeId string, updateAt bool) (*ProviderContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ProviderContractTypeMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contracttypeid", ContractTypeId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contracttypeid", ContractTypeId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateProviderId - update field
func (e *ProviderContractTypeMongo) UpdateProviderId(ProviderId string, updateAt bool) (*ProviderContractTypeMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ProviderContractTypeMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"providerid", ProviderId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"providerid", ProviderId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

func (e *RequestMongo) ToPB() *Request {
	var resp Request
	if !e.Id.IsZero() {
		resp.Id = e.Id.Hex()
	}
	if !e.ContractId.IsZero() {
		resp.ContractId = e.ContractId.Hex()
	}
	if !e.From.IsZero() {
		resp.From = e.From.Hex()
	}
	if !e.To.IsZero() {
		resp.To = e.To.Hex()
	}
	resp.TransmittalDescription = e.TransmittalDescription
	resp.PublishField = &Request_Publish{e.GetPublish()}
	resp.Status = e.Status
	// create nested pb
	var subEventLogs []*RequestEventLog
	if e.EventLogs != nil {
		if len(e.EventLogs) > 0 {
			for _, b := range e.EventLogs {
				subEventLogs = append(subEventLogs, b.ToPB())
			}
		}
	}
	resp.EventLogs = subEventLogs
	ptapExpiredAt, _ := ptypes.TimestampProto(e.ExpiredAt)
	resp.ExpiredAt = ptapExpiredAt
	ptapCreatedAt, _ := ptypes.TimestampProto(e.CreatedAt)
	resp.CreatedAt = ptapCreatedAt
	ptapUpdatedAt, _ := ptypes.TimestampProto(e.UpdatedAt)
	resp.UpdatedAt = ptapUpdatedAt
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *Request) ToMongo() *RequestMongo {
	var resp RequestMongo
	if len(e.Id) > 0 {
		resp.Id = bom.ToObj(e.Id)
	}
	if len(e.ContractId) > 0 {
		resp.ContractId = bom.ToObj(e.ContractId)
	}
	if len(e.From) > 0 {
		resp.From = bom.ToObj(e.From)
	}
	if len(e.To) > 0 {
		resp.To = bom.ToObj(e.To)
	}
	resp.TransmittalDescription = e.TransmittalDescription
	// oneof link
	if e.GetPublishField() != nil {
		linkPublish := e.GetPublish()
		resp.Publish = &linkPublish
	}

	resp.Status = e.Status
	// create nested mongo
	var subEventLogs []*RequestEventLogMongo
	if e.EventLogs != nil {
		if len(e.EventLogs) > 0 {
			for _, b := range e.EventLogs {
				if b != nil {
					subEventLogs = append(subEventLogs, b.ToMongo())
				}
			}
		}
	}
	resp.EventLogs = subEventLogs
	// create time object
	utExpiredAt := time.Unix(e.ExpiredAt.GetSeconds(), int64(e.ExpiredAt.GetNanos()))
	resp.ExpiredAt = utExpiredAt
	// create time object
	utCreatedAt := time.Unix(e.CreatedAt.GetSeconds(), int64(e.CreatedAt.GetNanos()))
	resp.CreatedAt = utCreatedAt
	// create time object
	utUpdatedAt := time.Unix(e.UpdatedAt.GetSeconds(), int64(e.UpdatedAt.GetNanos()))
	resp.UpdatedAt = utUpdatedAt

	// bom connection
	resp.bom = ContractServiceBomWrapper().WithColl("requests")

	return &resp
}

func (e *RequestMongo) WithObjectId() *RequestMongo {
	e.Id = primitive.NewObjectID() // create object id
	return e
}

// create MongoDB Model from protobuf (RequestMongo)
type RequestMongo struct {
	Id                     primitive.ObjectID      `_id, omitempty`
	ContractId             primitive.ObjectID      `json:"contractid"`
	From                   primitive.ObjectID      `json:"from"`
	To                     primitive.ObjectID      `json:"to"`
	TransmittalDescription string                  `json:"transmittaldescription"`
	Publish                *bool                   `json:"publish"`
	Status                 RequestStatus           `json:"status"`
	EventLogs              []*RequestEventLogMongo `json:"eventlogs"`
	ExpiredAt              time.Time               `json:"expiredat"`
	CreatedAt              time.Time               `json:"createdat"`
	UpdatedAt              time.Time               `json:"updatedat"`
	bom                    *bom.Bom
}

//Check method Publish - update field
func (e *RequestMongo) GetPublish() bool {
	var resp bool
	if e.Publish != nil {
		resp = *((*bool)(unsafe.Pointer(e.Publish)))
	}
	return resp
}

// isValid - validation method of the described protobuf structure
func (e *RequestMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

// set custom bom wrapper
func (e *RequestMongo) SetBom(bom *bom.Bom) *RequestMongo {
	e.bom = bom.WithColl("requests")
	return e
}

// GetSourceBom - Get the source object
func (e *RequestMongo) GetBom() *bom.Bom {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	return e.bom
}

//
// create RequestMongo mongo model of protobuf Request
//
func NewRequestMongo() *RequestMongo {
	return &RequestMongo{bom: ContractServiceBomWrapper().WithColl("requests")}
}

// InsertOne method
func (e *RequestMongo) InsertOne() (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.Id = primitive.NewObjectID() // create object id
	res, err := e.bom.InsertOne(e)
	if err != nil {
		return nil, err
	}
	if insertId, ok := res.InsertedID.(primitive.ObjectID); ok {
		e.Id = insertId
	}
	return e, nil
}

// FindOneById - find method
func (e *RequestMongo) FindOneById(Id string) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := RequestMongo{}
	err := e.bom.
		Where("_id", bom.ToObj(Id)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByContractId - find method
func (e *RequestMongo) FindOneByContractId(ContractId string) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := RequestMongo{}
	err := e.bom.
		Where("contractid", bom.ToObj(ContractId)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByFrom - find method
func (e *RequestMongo) FindOneByFrom(From string) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := RequestMongo{}
	err := e.bom.
		Where("from", bom.ToObj(From)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByTo - find method
func (e *RequestMongo) FindOneByTo(To string) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := RequestMongo{}
	err := e.bom.
		Where("to", bom.ToObj(To)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByTransmittalDescription - find method
func (e *RequestMongo) FindOneByTransmittalDescription(TransmittalDescription string) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := RequestMongo{}
	err := e.bom.
		Where("transmittaldescription", TransmittalDescription).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByPublish - find method
func (e *RequestMongo) FindOneByPublish(Publish bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := RequestMongo{}
	err := e.bom.
		Where("publish", Publish).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByStatus - find method
func (e *RequestMongo) FindOneByStatus(Status RequestStatus) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := RequestMongo{}
	err := e.bom.
		Where("status", Status).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

//Update - update model method, a check is made on existing fields.
func (e *RequestMongo) Update(updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var flatFields []primitive.E
	var upResult primitive.D
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// set ContractId
	if e.ContractId.Hex() != "000000000000000000000000" {
		flatFields = append(flatFields, primitive.E{Key: "contractid", Value: e.ContractId})
	}
	// set From
	if e.From.Hex() != "000000000000000000000000" {
		flatFields = append(flatFields, primitive.E{Key: "from", Value: e.From})
	}
	// set To
	if e.To.Hex() != "000000000000000000000000" {
		flatFields = append(flatFields, primitive.E{Key: "to", Value: e.To})
	}
	// set TransmittalDescription
	if len(e.TransmittalDescription) > 0 {
		flatFields = append(flatFields, primitive.E{Key: "transmittaldescription", Value: e.TransmittalDescription})
	}
	// set Publish
	if e.Publish != nil {
		flatFields = append(flatFields, primitive.E{Key: "publish", Value: e.GetPublish()})
	}
	// set Status
	if e.Status > 0 {
		flatFields = append(flatFields, primitive.E{Key: "status", Value: e.Status})
	}
	// set EventLogs
	if e.EventLogs != nil {
		flatFields = append(flatFields, primitive.E{Key: "eventlogs", Value: e.EventLogs})
	}
	// set ExpiredAt
	if !e.ExpiredAt.IsZero() {
		flatFields = append(flatFields, primitive.E{Key: "expiredat", Value: e.ExpiredAt})
	}
	if updateAt {
		upResult = primitive.D{
			{"$set", flatFields},
			{"$currentDate", primitive.D{{"updatedat", true}}},
		}
	} else {
		upResult = primitive.D{
			{"$set", flatFields},
		}
	}
	_, err := e.bom.UpdateRaw(upResult)
	if err != nil {
		return e, err
	}
	return e, nil
}

func (e *RequestMongo) WhereId(id string) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq("_id", bom.ToObj(id))
	return e
}

func (e *RequestMongo) WhereIds(ids []string) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere("_id", bom.ToObjects(ids))
	return e
}

// Find  find method
func (e *RequestMongo) FindOne() (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := RequestMongo{}
	err := e.bom.
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// Iteration - full iteration method (note that an anonymous function return false to continue)
// the method is based on the last element pagination mechanism
func (e *RequestMongo) Iteration(fn func(request []*RequestMongo) bool, size int32) error {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// set size
	e.Size(size)
	request, lastId, err := e.ListWithLastId()
	// first start
	if !fn(request) {
		return nil
	}
	for len(lastId) > 0 {
		request, lastId, err = e.LastId(lastId).ListWithLastId()
		if !fn(request) {
			continue
		}
	}
	return err
}

//Deprecated: should use WhereConditions or WhereEq
func (e *RequestMongo) Where(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereEq method
func (e *RequestMongo) WhereEq(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereGt method
func (e *RequestMongo) WhereGt(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGt(field, value)
	return e
}

// WhereGte method
func (e *RequestMongo) WhereGte(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGte(field, value)
	return e
}

// WhereLt method
func (e *RequestMongo) WhereLt(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLt(field, value)
	return e
}

// WhereLte method
func (e *RequestMongo) WhereLte(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLte(field, value)
	return e
}

// Limit method
func (e *RequestMongo) Limit(page int32, size int32) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLimit(&bom.Limit{Page: page, Size: size})
	return e
}

// Size method
func (e *RequestMongo) Size(size int32) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithSize(size)
	return e
}

// LastId method
func (e *RequestMongo) LastId(lastId string) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLastId(lastId)
	return e
}

// Sort method
func (e *RequestMongo) Sort(sortField string, sortType string) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	if sortField == "id" {
		sortField = "_id"
	}
	e.bom.WithSort(&bom.Sort{Field: sortField, Type: sortType})
	return e
}

// Find with pagination
func (e *RequestMongo) ListWithPagination() ([]*RequestMongo, *bom.Pagination, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*RequestMongo
	paginator, err := e.bom.ListWithPagination(func(cur *mongo.Cursor) error {
		var result RequestMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, paginator, err
}

// List with last id for fast pagination
func (e *RequestMongo) ListWithLastId() ([]*RequestMongo, string, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*RequestMongo
	lastId, err := e.bom.ListWithLastId(func(cur *mongo.Cursor) error {
		var result RequestMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, lastId, err
}

// Find list
func (e *RequestMongo) List() ([]*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*RequestMongo
	err := e.bom.List(func(cur *mongo.Cursor) error {
		var result RequestMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, err
}

// Get bulk map
func (e *RequestMongo) GetBulkMap(ids []string) (map[string]*RequestMongo, error) {
	result := make(map[string]*RequestMongo)
	items, err := e.WhereIn("_id", bom.ToObjects(ids)).List()
	if err != nil {
		return result, err
	}
	for _, v := range items {
		result[v.Id.Hex()] = v
	}
	return result, nil
}

// Get bulk map
func (e *RequestMongo) GetBulk(ids []string) ([]*RequestMongo, error) {
	return e.WhereIn("_id", bom.ToObjects(ids)).List()
}

// WhereIn method
func (e *RequestMongo) WhereIn(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere(field, value)
	return e
}

// WhereNotIn method
func (e *RequestMongo) WhereNotIn(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// exist in bom version >= 1.0.11
	e.bom.NotInWhere(field, value)
	return e
}

//Deprecated: should use OrWhereEq
func (e *RequestMongo) OrWhere(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// WhereNotEq
func (e *RequestMongo) WhereNotEq(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereNotEq(field, value)
	return e
}

// OrWhereEq method
func (e *RequestMongo) OrWhereEq(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// OrWhereGt method
func (e *RequestMongo) OrWhereGt(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGt(field, value)
	return e
}

// OrWhereGte method
func (e *RequestMongo) OrWhereGte(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGte(field, value)
	return e
}

// OrWhereLt method
func (e *RequestMongo) OrWhereLt(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLt(field, value)
	return e
}

// OrWhereLte method
func (e *RequestMongo) OrWhereLte(field string, value interface{}) *RequestMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLte(field, value)
	return e
}

// UpdateContractId - update field
func (e *RequestMongo) UpdateContractId(ContractId string, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contractid", ContractId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contractid", ContractId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateFrom - update field
func (e *RequestMongo) UpdateFrom(From string, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"from", From}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"from", From}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateTo - update field
func (e *RequestMongo) UpdateTo(To string, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"to", To}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"to", To}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateTransmittalDescription - update field
func (e *RequestMongo) UpdateTransmittalDescription(TransmittalDescription string, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"transmittaldescription", TransmittalDescription}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"transmittaldescription", TransmittalDescription}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdatePublish - update field
func (e *RequestMongo) UpdatePublish(Publish bool, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"publish", Publish}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"publish", Publish}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateStatus - update field
func (e *RequestMongo) UpdateStatus(Status RequestStatus, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"status", Status}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"status", Status}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateEventLogs - update field
func (e *RequestMongo) UpdateEventLogs(EventLogs []*RequestEventLogMongo, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"eventlogs", EventLogs}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"eventlogs", EventLogs}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateExpiredAt - update field
func (e *RequestMongo) UpdateExpiredAt(ExpiredAt time.Time, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"expiredat", ExpiredAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"expiredat", ExpiredAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateCreatedAt - update field
func (e *RequestMongo) UpdateCreatedAt(CreatedAt time.Time, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"createdat", CreatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"createdat", CreatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateUpdatedAt - update field
func (e *RequestMongo) UpdateUpdatedAt(UpdatedAt time.Time, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"updatedat", UpdatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"updatedat", UpdatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateContract - update field
func (e *RequestMongo) UpdateContract(Contract *ContractMongo, updateAt bool) (*RequestMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := RequestMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contract", Contract}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contract", Contract}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

func (e *ProgressEventLogMongo) ToPB() *ProgressEventLog {
	var resp ProgressEventLog
	ptapCreatedAt, _ := ptypes.TimestampProto(e.CreatedAt)
	resp.CreatedAt = ptapCreatedAt
	resp.Message = e.Message
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *ProgressEventLog) ToMongo() *ProgressEventLogMongo {
	var resp ProgressEventLogMongo
	// create time object
	utCreatedAt := time.Unix(e.CreatedAt.GetSeconds(), int64(e.CreatedAt.GetNanos()))
	resp.CreatedAt = utCreatedAt
	resp.Message = e.Message
	return &resp
}

// create MongoDB Model from protobuf (ProgressEventLogMongo)
type ProgressEventLogMongo struct {
	CreatedAt time.Time `json:"createdat"`
	Message   string    `json:"message"`
	bom       *bom.Bom
}

// isValid - validation method of the described protobuf structure
func (e *ProgressEventLogMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

func (e *RequestEventLogMongo) ToPB() *RequestEventLog {
	var resp RequestEventLog
	ptapCreatedAt, _ := ptypes.TimestampProto(e.CreatedAt)
	resp.CreatedAt = ptapCreatedAt
	resp.Message = e.Message
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *RequestEventLog) ToMongo() *RequestEventLogMongo {
	var resp RequestEventLogMongo
	// create time object
	utCreatedAt := time.Unix(e.CreatedAt.GetSeconds(), int64(e.CreatedAt.GetNanos()))
	resp.CreatedAt = utCreatedAt
	resp.Message = e.Message
	return &resp
}

// create MongoDB Model from protobuf (RequestEventLogMongo)
type RequestEventLogMongo struct {
	CreatedAt time.Time `json:"createdat"`
	Message   string    `json:"message"`
	bom       *bom.Bom
}

// isValid - validation method of the described protobuf structure
func (e *RequestEventLogMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

func (e *ActRequestMongo) ToPB() *ActRequest {
	var resp ActRequest
	resp.Amount = e.Amount
	resp.PublicId = e.PublicId
	resp.OnlyDB = e.OnlyDB
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *ActRequest) ToMongo() *ActRequestMongo {
	var resp ActRequestMongo
	resp.Amount = e.Amount
	resp.PublicId = e.PublicId
	resp.OnlyDB = e.OnlyDB
	return &resp
}

// create MongoDB Model from protobuf (ActRequestMongo)
type ActRequestMongo struct {
	Amount   int32  `json:"amount"`
	PublicId string `json:"publicid"`
	OnlyDB   int32  `json:"onlydb"`
	bom      *bom.Bom
}

// isValid - validation method of the described protobuf structure
func (e *ActRequestMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

func (e *PrivateActMongo) ToPB() *PrivateAct {
	var resp PrivateAct
	resp.OnlyDB = e.OnlyDB
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *PrivateAct) ToMongo() *PrivateActMongo {
	var resp PrivateActMongo
	resp.OnlyDB = e.OnlyDB
	return &resp
}

// create MongoDB Model from protobuf (PrivateActMongo)
type PrivateActMongo struct {
	OnlyDB int32 `json:"onlydb"`
	bom    *bom.Bom
}

// isValid - validation method of the described protobuf structure
func (e *PrivateActMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

func (e *ActMongo) ToPB() *Act {
	var resp Act
	if !e.Id.IsZero() {
		resp.Id = e.Id.Hex()
	}
	if !e.ContractId.IsZero() {
		resp.ContractId = e.ContractId.Hex()
	}
	resp.Amount = e.Amount
	resp.PublicId = e.PublicId
	// create single pb
	if e.Contract != nil {
		resp.Contract = e.Contract.ToPB()
	}
	ptapStartPeriod, _ := ptypes.TimestampProto(e.StartPeriod)
	resp.StartPeriod = ptapStartPeriod
	ptapEndPeriod, _ := ptypes.TimestampProto(e.EndPeriod)
	resp.EndPeriod = ptapEndPeriod
	ptapCreatedAt, _ := ptypes.TimestampProto(e.CreatedAt)
	resp.CreatedAt = ptapCreatedAt
	ptapUpdatedAt, _ := ptypes.TimestampProto(e.UpdatedAt)
	resp.UpdatedAt = ptapUpdatedAt
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *Act) ToMongo() *ActMongo {
	var resp ActMongo
	if len(e.Id) > 0 {
		resp.Id = bom.ToObj(e.Id)
	}
	if len(e.ContractId) > 0 {
		resp.ContractId = bom.ToObj(e.ContractId)
	}
	resp.Amount = e.Amount
	resp.PublicId = e.PublicId
	// create single mongo
	if e.Contract != nil {
		resp.Contract = e.Contract.ToMongo()
	}
	// create time object
	utStartPeriod := time.Unix(e.StartPeriod.GetSeconds(), int64(e.StartPeriod.GetNanos()))
	resp.StartPeriod = utStartPeriod
	// create time object
	utEndPeriod := time.Unix(e.EndPeriod.GetSeconds(), int64(e.EndPeriod.GetNanos()))
	resp.EndPeriod = utEndPeriod
	// create time object
	utCreatedAt := time.Unix(e.CreatedAt.GetSeconds(), int64(e.CreatedAt.GetNanos()))
	resp.CreatedAt = utCreatedAt
	// create time object
	utUpdatedAt := time.Unix(e.UpdatedAt.GetSeconds(), int64(e.UpdatedAt.GetNanos()))
	resp.UpdatedAt = utUpdatedAt

	// bom connection
	resp.bom = ContractServiceBomWrapper().WithColl("act")

	return &resp
}

func (e *ActMongo) WithObjectId() *ActMongo {
	e.Id = primitive.NewObjectID() // create object id
	return e
}

// create MongoDB Model from protobuf (ActMongo)
type ActMongo struct {
	PrivateActMongo
	Id          primitive.ObjectID `_id, omitempty`
	ContractId  primitive.ObjectID `json:"contractid"`
	Amount      int32              `json:"amount"`
	PublicId    string             `json:"publicid"`
	Contract    *ContractMongo     `json:"contract"`
	StartPeriod time.Time          `json:"startperiod"`
	EndPeriod   time.Time          `json:"endperiod"`
	CreatedAt   time.Time          `json:"createdat"`
	UpdatedAt   time.Time          `json:"updatedat"`
	bom         *bom.Bom
}

// isValid - validation method of the described protobuf structure
func (e *ActMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

// set custom bom wrapper
func (e *ActMongo) SetBom(bom *bom.Bom) *ActMongo {
	e.bom = bom.WithColl("act")
	return e
}

// GetSourceBom - Get the source object
func (e *ActMongo) GetBom() *bom.Bom {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	return e.bom
}

//
// create ActMongo mongo model of protobuf Act
//
func NewActMongo() *ActMongo {
	return &ActMongo{bom: ContractServiceBomWrapper().WithColl("act")}
}

// InsertOne method
func (e *ActMongo) InsertOne() (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.Id = primitive.NewObjectID() // create object id
	res, err := e.bom.InsertOne(e)
	if err != nil {
		return nil, err
	}
	if insertId, ok := res.InsertedID.(primitive.ObjectID); ok {
		e.Id = insertId
	}
	return e, nil
}

// FindOneById - find method
func (e *ActMongo) FindOneById(Id string) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ActMongo{}
	err := e.bom.
		Where("_id", bom.ToObj(Id)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByContractId - find method
func (e *ActMongo) FindOneByContractId(ContractId string) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ActMongo{}
	err := e.bom.
		Where("contractid", bom.ToObj(ContractId)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByAmount - find method
func (e *ActMongo) FindOneByAmount(Amount int32) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ActMongo{}
	err := e.bom.
		Where("amount", Amount).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByPublicId - find method
func (e *ActMongo) FindOneByPublicId(PublicId string) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ActMongo{}
	err := e.bom.
		Where("publicid", PublicId).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByOnlyDB - find method
func (e *ActMongo) FindOneByOnlyDB(OnlyDB int32) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ActMongo{}
	err := e.bom.
		Where("onlydb", OnlyDB).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

//Update - update model method, a check is made on existing fields.
func (e *ActMongo) Update(updateAt bool) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var flatFields []primitive.E
	var upResult primitive.D
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// set ContractId
	if e.ContractId.Hex() != "000000000000000000000000" {
		flatFields = append(flatFields, primitive.E{Key: "contractid", Value: e.ContractId})
	}
	// set Amount
	if e.Amount > 0 {
		flatFields = append(flatFields, primitive.E{Key: "amount", Value: e.Amount})
	}
	// set PublicId
	if len(e.PublicId) > 0 {
		flatFields = append(flatFields, primitive.E{Key: "publicid", Value: e.PublicId})
	}
	// set Contract
	if e.Contract != nil {
		flatFields = append(flatFields, primitive.E{Key: "contract", Value: e.Contract})
	}
	// set StartPeriod
	if !e.StartPeriod.IsZero() {
		flatFields = append(flatFields, primitive.E{Key: "startperiod", Value: e.StartPeriod})
	}
	// set EndPeriod
	if !e.EndPeriod.IsZero() {
		flatFields = append(flatFields, primitive.E{Key: "endperiod", Value: e.EndPeriod})
	}
	// set OnlyDB
	if e.OnlyDB > 0 {
		flatFields = append(flatFields, primitive.E{Key: "onlydb", Value: e.OnlyDB})
	}
	if updateAt {
		upResult = primitive.D{
			{"$set", flatFields},
			{"$currentDate", primitive.D{{"updatedat", true}}},
		}
	} else {
		upResult = primitive.D{
			{"$set", flatFields},
		}
	}
	_, err := e.bom.UpdateRaw(upResult)
	if err != nil {
		return e, err
	}
	return e, nil
}

func (e *ActMongo) WhereId(id string) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq("_id", bom.ToObj(id))
	return e
}

func (e *ActMongo) WhereIds(ids []string) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere("_id", bom.ToObjects(ids))
	return e
}

// Find  find method
func (e *ActMongo) FindOne() (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := ActMongo{}
	err := e.bom.
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// Iteration - full iteration method (note that an anonymous function return false to continue)
// the method is based on the last element pagination mechanism
func (e *ActMongo) Iteration(fn func(act []*ActMongo) bool, size int32) error {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// set size
	e.Size(size)
	act, lastId, err := e.ListWithLastId()
	// first start
	if !fn(act) {
		return nil
	}
	for len(lastId) > 0 {
		act, lastId, err = e.LastId(lastId).ListWithLastId()
		if !fn(act) {
			continue
		}
	}
	return err
}

//Deprecated: should use WhereConditions or WhereEq
func (e *ActMongo) Where(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereEq method
func (e *ActMongo) WhereEq(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereGt method
func (e *ActMongo) WhereGt(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGt(field, value)
	return e
}

// WhereGte method
func (e *ActMongo) WhereGte(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGte(field, value)
	return e
}

// WhereLt method
func (e *ActMongo) WhereLt(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLt(field, value)
	return e
}

// WhereLte method
func (e *ActMongo) WhereLte(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLte(field, value)
	return e
}

// Limit method
func (e *ActMongo) Limit(page int32, size int32) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLimit(&bom.Limit{Page: page, Size: size})
	return e
}

// Size method
func (e *ActMongo) Size(size int32) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithSize(size)
	return e
}

// LastId method
func (e *ActMongo) LastId(lastId string) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLastId(lastId)
	return e
}

// Sort method
func (e *ActMongo) Sort(sortField string, sortType string) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	if sortField == "id" {
		sortField = "_id"
	}
	e.bom.WithSort(&bom.Sort{Field: sortField, Type: sortType})
	return e
}

// Find with pagination
func (e *ActMongo) ListWithPagination() ([]*ActMongo, *bom.Pagination, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ActMongo
	paginator, err := e.bom.ListWithPagination(func(cur *mongo.Cursor) error {
		var result ActMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, paginator, err
}

// List with last id for fast pagination
func (e *ActMongo) ListWithLastId() ([]*ActMongo, string, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ActMongo
	lastId, err := e.bom.ListWithLastId(func(cur *mongo.Cursor) error {
		var result ActMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, lastId, err
}

// Find list
func (e *ActMongo) List() ([]*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*ActMongo
	err := e.bom.List(func(cur *mongo.Cursor) error {
		var result ActMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, err
}

// Get bulk map
func (e *ActMongo) GetBulkMap(ids []string) (map[string]*ActMongo, error) {
	result := make(map[string]*ActMongo)
	items, err := e.WhereIn("_id", bom.ToObjects(ids)).List()
	if err != nil {
		return result, err
	}
	for _, v := range items {
		result[v.Id.Hex()] = v
	}
	return result, nil
}

// Get bulk map
func (e *ActMongo) GetBulk(ids []string) ([]*ActMongo, error) {
	return e.WhereIn("_id", bom.ToObjects(ids)).List()
}

// WhereIn method
func (e *ActMongo) WhereIn(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere(field, value)
	return e
}

// WhereNotIn method
func (e *ActMongo) WhereNotIn(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// exist in bom version >= 1.0.11
	e.bom.NotInWhere(field, value)
	return e
}

//Deprecated: should use OrWhereEq
func (e *ActMongo) OrWhere(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// WhereNotEq
func (e *ActMongo) WhereNotEq(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereNotEq(field, value)
	return e
}

// OrWhereEq method
func (e *ActMongo) OrWhereEq(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// OrWhereGt method
func (e *ActMongo) OrWhereGt(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGt(field, value)
	return e
}

// OrWhereGte method
func (e *ActMongo) OrWhereGte(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGte(field, value)
	return e
}

// OrWhereLt method
func (e *ActMongo) OrWhereLt(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLt(field, value)
	return e
}

// OrWhereLte method
func (e *ActMongo) OrWhereLte(field string, value interface{}) *ActMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLte(field, value)
	return e
}

// UpdateContractId - update field
func (e *ActMongo) UpdateContractId(ContractId string, updateAt bool) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ActMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contractid", ContractId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contractid", ContractId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateAmount - update field
func (e *ActMongo) UpdateAmount(Amount int32, updateAt bool) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ActMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"amount", Amount}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"amount", Amount}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdatePublicId - update field
func (e *ActMongo) UpdatePublicId(PublicId string, updateAt bool) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ActMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"publicid", PublicId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"publicid", PublicId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateContract - update field
func (e *ActMongo) UpdateContract(Contract *ContractMongo, updateAt bool) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ActMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contract", Contract}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contract", Contract}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateStartPeriod - update field
func (e *ActMongo) UpdateStartPeriod(StartPeriod time.Time, updateAt bool) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ActMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"startperiod", StartPeriod}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"startperiod", StartPeriod}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateEndPeriod - update field
func (e *ActMongo) UpdateEndPeriod(EndPeriod time.Time, updateAt bool) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ActMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"endperiod", EndPeriod}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"endperiod", EndPeriod}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateCreatedAt - update field
func (e *ActMongo) UpdateCreatedAt(CreatedAt time.Time, updateAt bool) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ActMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"createdat", CreatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"createdat", CreatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateUpdatedAt - update field
func (e *ActMongo) UpdateUpdatedAt(UpdatedAt time.Time, updateAt bool) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ActMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"updatedat", UpdatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"updatedat", UpdatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateOnlyDB - update field
func (e *ActMongo) UpdateOnlyDB(OnlyDB int32, updateAt bool) (*ActMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := ActMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"onlydb", OnlyDB}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"onlydb", OnlyDB}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

func (e *SaleOfChecksPayloadMongo) ToPB() *SaleOfChecksPayload {
	var resp SaleOfChecksPayload
	if !e.Id.IsZero() {
		resp.Id = e.Id.Hex()
	}
	resp.PeriodId = e.PeriodId
	if !e.ContractId.IsZero() {
		resp.ContractId = e.ContractId.Hex()
	}
	resp.Amount = e.Amount
	resp.Count = e.Count
	ptapStartPeriod, _ := ptypes.TimestampProto(e.StartPeriod)
	resp.StartPeriod = ptapStartPeriod
	ptapEndPeriod, _ := ptypes.TimestampProto(e.EndPeriod)
	resp.EndPeriod = ptapEndPeriod
	ptapCreatedAt, _ := ptypes.TimestampProto(e.CreatedAt)
	resp.CreatedAt = ptapCreatedAt
	ptapUpdatedAt, _ := ptypes.TimestampProto(e.UpdatedAt)
	resp.UpdatedAt = ptapUpdatedAt
	return &resp
}

// ToMongo runs the BeforeToMongo hook if present, converts the fields of this
// object to Mongo format, runs the AfterToMongo hook, then returns the Mongo object
func (e *SaleOfChecksPayload) ToMongo() *SaleOfChecksPayloadMongo {
	var resp SaleOfChecksPayloadMongo
	if len(e.Id) > 0 {
		resp.Id = bom.ToObj(e.Id)
	}
	resp.PeriodId = e.PeriodId
	if len(e.ContractId) > 0 {
		resp.ContractId = bom.ToObj(e.ContractId)
	}
	resp.Amount = e.Amount
	resp.Count = e.Count
	// create time object
	utStartPeriod := time.Unix(e.StartPeriod.GetSeconds(), int64(e.StartPeriod.GetNanos()))
	resp.StartPeriod = utStartPeriod
	// create time object
	utEndPeriod := time.Unix(e.EndPeriod.GetSeconds(), int64(e.EndPeriod.GetNanos()))
	resp.EndPeriod = utEndPeriod
	// create time object
	utCreatedAt := time.Unix(e.CreatedAt.GetSeconds(), int64(e.CreatedAt.GetNanos()))
	resp.CreatedAt = utCreatedAt
	// create time object
	utUpdatedAt := time.Unix(e.UpdatedAt.GetSeconds(), int64(e.UpdatedAt.GetNanos()))
	resp.UpdatedAt = utUpdatedAt

	// bom connection
	resp.bom = ContractServiceBomWrapper().WithColl("condition_sale_checks_payload")

	return &resp
}

func (e *SaleOfChecksPayloadMongo) WithObjectId() *SaleOfChecksPayloadMongo {
	e.Id = primitive.NewObjectID() // create object id
	return e
}

// create MongoDB Model from protobuf (SaleOfChecksPayloadMongo)
type SaleOfChecksPayloadMongo struct {
	Id          primitive.ObjectID `_id, omitempty`
	PeriodId    string             `json:"periodid"`
	ContractId  primitive.ObjectID `json:"contractid"`
	Amount      int32              `json:"amount"`
	Count       int32              `json:"count"`
	StartPeriod time.Time          `json:"startperiod"`
	EndPeriod   time.Time          `json:"endperiod"`
	CreatedAt   time.Time          `json:"createdat"`
	UpdatedAt   time.Time          `json:"updatedat"`
	bom         *bom.Bom
}

// isValid - validation method of the described protobuf structure
func (e *SaleOfChecksPayloadMongo) IsValid() error {
	if _, err := valid.ValidateStruct(e); err != nil {
		return err
	}
	return nil
}

// set custom bom wrapper
func (e *SaleOfChecksPayloadMongo) SetBom(bom *bom.Bom) *SaleOfChecksPayloadMongo {
	e.bom = bom.WithColl("condition_sale_checks_payload")
	return e
}

// GetSourceBom - Get the source object
func (e *SaleOfChecksPayloadMongo) GetBom() *bom.Bom {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	return e.bom
}

//
// create SaleOfChecksPayloadMongo mongo model of protobuf SaleOfChecksPayload
//
func NewSaleOfChecksPayloadMongo() *SaleOfChecksPayloadMongo {
	return &SaleOfChecksPayloadMongo{bom: ContractServiceBomWrapper().WithColl("condition_sale_checks_payload")}
}

// InsertOne method
func (e *SaleOfChecksPayloadMongo) InsertOne() (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.Id = primitive.NewObjectID() // create object id
	res, err := e.bom.InsertOne(e)
	if err != nil {
		return nil, err
	}
	if insertId, ok := res.InsertedID.(primitive.ObjectID); ok {
		e.Id = insertId
	}
	return e, nil
}

// FindOneById - find method
func (e *SaleOfChecksPayloadMongo) FindOneById(Id string) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := SaleOfChecksPayloadMongo{}
	err := e.bom.
		Where("_id", bom.ToObj(Id)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByPeriodId - find method
func (e *SaleOfChecksPayloadMongo) FindOneByPeriodId(PeriodId string) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := SaleOfChecksPayloadMongo{}
	err := e.bom.
		Where("periodid", PeriodId).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByContractId - find method
func (e *SaleOfChecksPayloadMongo) FindOneByContractId(ContractId string) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := SaleOfChecksPayloadMongo{}
	err := e.bom.
		Where("contractid", bom.ToObj(ContractId)).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByAmount - find method
func (e *SaleOfChecksPayloadMongo) FindOneByAmount(Amount int32) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := SaleOfChecksPayloadMongo{}
	err := e.bom.
		Where("amount", Amount).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// FindOneByCount - find method
func (e *SaleOfChecksPayloadMongo) FindOneByCount(Count int32) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := SaleOfChecksPayloadMongo{}
	err := e.bom.
		Where("count", Count).
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

//Update - update model method, a check is made on existing fields.
func (e *SaleOfChecksPayloadMongo) Update(updateAt bool) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var flatFields []primitive.E
	var upResult primitive.D
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// set PeriodId
	if len(e.PeriodId) > 0 {
		flatFields = append(flatFields, primitive.E{Key: "periodid", Value: e.PeriodId})
	}
	// set ContractId
	if e.ContractId.Hex() != "000000000000000000000000" {
		flatFields = append(flatFields, primitive.E{Key: "contractid", Value: e.ContractId})
	}
	// set Amount
	if e.Amount > 0 {
		flatFields = append(flatFields, primitive.E{Key: "amount", Value: e.Amount})
	}
	// set Count
	if e.Count > 0 {
		flatFields = append(flatFields, primitive.E{Key: "count", Value: e.Count})
	}
	// set StartPeriod
	if !e.StartPeriod.IsZero() {
		flatFields = append(flatFields, primitive.E{Key: "startperiod", Value: e.StartPeriod})
	}
	// set EndPeriod
	if !e.EndPeriod.IsZero() {
		flatFields = append(flatFields, primitive.E{Key: "endperiod", Value: e.EndPeriod})
	}
	if updateAt {
		upResult = primitive.D{
			{"$set", flatFields},
			{"$currentDate", primitive.D{{"updatedat", true}}},
		}
	} else {
		upResult = primitive.D{
			{"$set", flatFields},
		}
	}
	_, err := e.bom.UpdateRaw(upResult)
	if err != nil {
		return e, err
	}
	return e, nil
}

func (e *SaleOfChecksPayloadMongo) WhereId(id string) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq("_id", bom.ToObj(id))
	return e
}

func (e *SaleOfChecksPayloadMongo) WhereIds(ids []string) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere("_id", bom.ToObjects(ids))
	return e
}

// Find  find method
func (e *SaleOfChecksPayloadMongo) FindOne() (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	mongoModel := SaleOfChecksPayloadMongo{}
	err := e.bom.
		FindOne(func(s *mongo.SingleResult) error {
			err := s.Decode(&mongoModel)
			if err != nil {
				return err
			}
			return nil
		})
	return &mongoModel, err
}

// Iteration - full iteration method (note that an anonymous function return false to continue)
// the method is based on the last element pagination mechanism
func (e *SaleOfChecksPayloadMongo) Iteration(fn func(saleofcheckspayload []*SaleOfChecksPayloadMongo) bool, size int32) error {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// set size
	e.Size(size)
	saleofcheckspayload, lastId, err := e.ListWithLastId()
	// first start
	if !fn(saleofcheckspayload) {
		return nil
	}
	for len(lastId) > 0 {
		saleofcheckspayload, lastId, err = e.LastId(lastId).ListWithLastId()
		if !fn(saleofcheckspayload) {
			continue
		}
	}
	return err
}

//Deprecated: should use WhereConditions or WhereEq
func (e *SaleOfChecksPayloadMongo) Where(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereEq method
func (e *SaleOfChecksPayloadMongo) WhereEq(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereEq(field, value)
	return e
}

// WhereGt method
func (e *SaleOfChecksPayloadMongo) WhereGt(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGt(field, value)
	return e
}

// WhereGte method
func (e *SaleOfChecksPayloadMongo) WhereGte(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereGte(field, value)
	return e
}

// WhereLt method
func (e *SaleOfChecksPayloadMongo) WhereLt(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLt(field, value)
	return e
}

// WhereLte method
func (e *SaleOfChecksPayloadMongo) WhereLte(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereLte(field, value)
	return e
}

// Limit method
func (e *SaleOfChecksPayloadMongo) Limit(page int32, size int32) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLimit(&bom.Limit{Page: page, Size: size})
	return e
}

// Size method
func (e *SaleOfChecksPayloadMongo) Size(size int32) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithSize(size)
	return e
}

// LastId method
func (e *SaleOfChecksPayloadMongo) LastId(lastId string) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WithLastId(lastId)
	return e
}

// Sort method
func (e *SaleOfChecksPayloadMongo) Sort(sortField string, sortType string) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	if sortField == "id" {
		sortField = "_id"
	}
	e.bom.WithSort(&bom.Sort{Field: sortField, Type: sortType})
	return e
}

// Find with pagination
func (e *SaleOfChecksPayloadMongo) ListWithPagination() ([]*SaleOfChecksPayloadMongo, *bom.Pagination, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*SaleOfChecksPayloadMongo
	paginator, err := e.bom.ListWithPagination(func(cur *mongo.Cursor) error {
		var result SaleOfChecksPayloadMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, paginator, err
}

// List with last id for fast pagination
func (e *SaleOfChecksPayloadMongo) ListWithLastId() ([]*SaleOfChecksPayloadMongo, string, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*SaleOfChecksPayloadMongo
	lastId, err := e.bom.ListWithLastId(func(cur *mongo.Cursor) error {
		var result SaleOfChecksPayloadMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, lastId, err
}

// Find list
func (e *SaleOfChecksPayloadMongo) List() ([]*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	var items []*SaleOfChecksPayloadMongo
	err := e.bom.List(func(cur *mongo.Cursor) error {
		var result SaleOfChecksPayloadMongo
		err := cur.Decode(&result)
		if err != nil {
			return err
		}
		items = append(items, &result)
		return nil
	})
	return items, err
}

// Get bulk map
func (e *SaleOfChecksPayloadMongo) GetBulkMap(ids []string) (map[string]*SaleOfChecksPayloadMongo, error) {
	result := make(map[string]*SaleOfChecksPayloadMongo)
	items, err := e.WhereIn("_id", bom.ToObjects(ids)).List()
	if err != nil {
		return result, err
	}
	for _, v := range items {
		result[v.Id.Hex()] = v
	}
	return result, nil
}

// Get bulk map
func (e *SaleOfChecksPayloadMongo) GetBulk(ids []string) ([]*SaleOfChecksPayloadMongo, error) {
	return e.WhereIn("_id", bom.ToObjects(ids)).List()
}

// WhereIn method
func (e *SaleOfChecksPayloadMongo) WhereIn(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.InWhere(field, value)
	return e
}

// WhereNotIn method
func (e *SaleOfChecksPayloadMongo) WhereNotIn(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// exist in bom version >= 1.0.11
	e.bom.NotInWhere(field, value)
	return e
}

//Deprecated: should use OrWhereEq
func (e *SaleOfChecksPayloadMongo) OrWhere(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// WhereNotEq
func (e *SaleOfChecksPayloadMongo) WhereNotEq(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.WhereNotEq(field, value)
	return e
}

// OrWhereEq method
func (e *SaleOfChecksPayloadMongo) OrWhereEq(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereEq(field, value)
	return e
}

// OrWhereGt method
func (e *SaleOfChecksPayloadMongo) OrWhereGt(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGt(field, value)
	return e
}

// OrWhereGte method
func (e *SaleOfChecksPayloadMongo) OrWhereGte(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereGte(field, value)
	return e
}

// OrWhereLt method
func (e *SaleOfChecksPayloadMongo) OrWhereLt(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLt(field, value)
	return e
}

// OrWhereLte method
func (e *SaleOfChecksPayloadMongo) OrWhereLte(field string, value interface{}) *SaleOfChecksPayloadMongo {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	e.bom.OrWhereLte(field, value)
	return e
}

// UpdatePeriodId - update field
func (e *SaleOfChecksPayloadMongo) UpdatePeriodId(PeriodId string, updateAt bool) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := SaleOfChecksPayloadMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"periodid", PeriodId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"periodid", PeriodId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateContractId - update field
func (e *SaleOfChecksPayloadMongo) UpdateContractId(ContractId string, updateAt bool) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := SaleOfChecksPayloadMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contractid", ContractId}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"contractid", ContractId}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateAmount - update field
func (e *SaleOfChecksPayloadMongo) UpdateAmount(Amount int32, updateAt bool) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := SaleOfChecksPayloadMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"amount", Amount}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"amount", Amount}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateCount - update field
func (e *SaleOfChecksPayloadMongo) UpdateCount(Count int32, updateAt bool) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := SaleOfChecksPayloadMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"count", Count}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"count", Count}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateStartPeriod - update field
func (e *SaleOfChecksPayloadMongo) UpdateStartPeriod(StartPeriod time.Time, updateAt bool) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := SaleOfChecksPayloadMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"startperiod", StartPeriod}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"startperiod", StartPeriod}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateEndPeriod - update field
func (e *SaleOfChecksPayloadMongo) UpdateEndPeriod(EndPeriod time.Time, updateAt bool) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := SaleOfChecksPayloadMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"endperiod", EndPeriod}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"endperiod", EndPeriod}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateCreatedAt - update field
func (e *SaleOfChecksPayloadMongo) UpdateCreatedAt(CreatedAt time.Time, updateAt bool) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := SaleOfChecksPayloadMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"createdat", CreatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"createdat", CreatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// UpdateUpdatedAt - update field
func (e *SaleOfChecksPayloadMongo) UpdateUpdatedAt(UpdatedAt time.Time, updateAt bool) (*SaleOfChecksPayloadMongo, error) {
	// check if bom object is nil
	if e.bom == nil {
		e.SetBom(ContractServiceBomWrapper())
	}
	// check if fil _id field
	if !e.Id.IsZero() {
		e.WhereId(e.Id.Hex())
	}
	// mongoModel := SaleOfChecksPayloadMongo{}
	if !updateAt {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"updatedat", UpdatedAt}}},
		})
		if err != nil {
			return e, err
		}
	} else {
		_, err := e.bom.UpdateRaw(primitive.D{
			{Key: "$set", Value: primitive.D{{"updatedat", UpdatedAt}}},
			{Key: "$currentDate", Value: primitive.D{{"updatedat", true}}},
		})
		if err != nil {
			return e, err
		}
	}
	return e, nil
}

// Merge - merge private structure (ActMongo)
func (e *ActMongo) MergePrivateActMongo(m *PrivateActMongo) *ActMongo {
	return e
}

// ToActMongo - convert structure (ActRequestMongo -> ActMongo)
func (e *ActRequestMongo) ToActMongo() *ActMongo {
	var entity ActMongo
	entity.Amount = e.Amount
	entity.PublicId = e.PublicId
	entity.OnlyDB = e.OnlyDB
	return &entity
}
